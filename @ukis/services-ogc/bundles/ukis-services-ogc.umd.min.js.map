{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ukis/services-ogc/lib/wmts/wmtsclient.service.ts","ng://@ukis/services-ogc/lib/owc/owc-json.service.ts","ng://@ukis/services-ogc/lib/wps/wps100/wps_marshaller_1.0.0.ts","ng://@ukis/services-ogc/lib/wps/wps200/helpers.ts","ng://@ukis/services-ogc/lib/wps/wps200/wps_marshaller_2.0.0.ts","ng://@ukis/services-ogc/lib/wps/utils/polling.ts","ng://@ukis/services-ogc/lib/wps/cache.ts","ng://@ukis/services-ogc/lib/wps/wpsclient.ts","ng://@ukis/services-ogc/lib/services-ogc.module.ts","ng://@ukis/services-ogc/lib/wps/wps_datatypes.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","XLink_1_0","XLink_1_0_Factory.XLink_1_0","OWS_1_1_0","OWS_1_1_0_Factory.OWS_1_1_0","SMIL_2_0","SMIL_2_0_Factory.SMIL_2_0","SMIL_2_0_Language","SMIL_2_0_Language_Factory.SMIL_2_0_Language","GML_3_1_1","GML_3_1_1_Factory.GML_3_1_1","WMTS_1_0","WMTS_1_0_Factory.WMTS_1_0","WmtsClientService","http","context","Jsonix","Context","xmlunmarshaller","createUnmarshaller","xmlmarshaller","createMarshaller","getCapabilities","url","version","_this","getCapabilitiesUrl","headers","HttpHeaders","Content-Type","Accept","get","responseType","pipe","map","response","unmarshalString","Injectable","args","providedIn","HttpClient","isWmsOffering","str","isWfsOffering","isWmtsOffering","isXyzOffering","isGeoJsonOffering","shardsExpand","v","split","j","start","charCodeAt","end","k","String","fromCharCode","toLowerCase","OwcJsonService","wmtsClient","checkContext","isContext_1_0","Array","isArray","properties","links","find","item","href","profiles","console","getContextTitle","title","getContextPublisher","publisher","getContextExtent","bbox","getResources","features","getResourceTitle","resource","getResourceUpdated","updated","getResourceDate","date","getResourceOfferings","offerings","isActive","active","getResourceOpacity","opacity","getResourceAttribution","attribution","getResourceShards","shards","convertOwcTimeToIsoTimeAndPeriodicity","owctime","arr","interval","periodicity","getResourceDimensions","dims","dimensions","_b","tslib_1.__values","_c","d","name","name_1","dim","log","units","values","display","format","period","default","getLayertypeFromOfferingCode","offering","code","WmsLayertype","WmtsLayertype","WfsLayertype","GeojsonLayertype","XyzLayertype","checkIfServiceOffering","contents","operations","checkIfDataOffering","getOfferingContents","getLegendUrl","legendUrl","defaultStyle","styles","filter","style","legendURL","getIconUrl","iconUrl","getLayers","owc","targetProjection","resources","layers$","resources_1","resources_1_1","createLayerFromOffering","forkJoin","layerType","isRasterLayertype","createRasterLayerFromOffering","isVectorLayertype","createVectorLayerFromOffering","layerUrl","data","getUrlFromUri","getJsonFromUri","content","layerOptions","id","displayName","getDisplayName","visible","type","removable","continuousWorld","legendImg","layer","VectorLayer","of","rasterLayer$","createWmsLayerFromOffering","createWmtsLayerFromOffering","CustomLayertype","getWmtsOptions","options","WmtsLayer","getWmsOptions","WmsLayer","rasterOptions","getRasterLayerOptions","getLayerForWMTS","styleInfo","getMatrixSetForWMTS","matrixSet","matrixSetOptions","matrixIds","resolutions","params","projection","_a","parseOperationUrl","urlParams","opCode","operation","op","matrixSets","srs","capabilities","ms","tm","origin","x","y","tilesize","LAYERS","FORMAT","TIME","VERSION","TILED","TRANSPARENT","STYLES","getLayerOptions","subdomains","uri","substring","indexOf","query","substr","lastIndexOf","result","forEach","part","toUpperCase","decodeURIComponent","generateOwsContextFrom","layers","extent","lang","layers_1","layers_1_1","generateResourceFromLayer","generateOfferingFromLayer","geometry","getOfferingCodeFromLayer","getContentsFromLayer","getOperationsFromLayer","JSON","stringify","RasterLayer","getWmsOperationsFromLayer","getWmtsOperationsFromLayer","getXyzOperationsFromLayer","method","getTmsOperationsFromLayer","getWfsOperationsFromLayer","wmsVersion","layerId","wmtsVersion","WpsMarshaller100","baseurl","executeUrl","processId","unmarshalCapabilities","out","processOfferings","process","identifier","unmarshalSyncExecuteResponse","responseJson","inputs","outputDescriptions","status","processFailed","description","reference","statusLocation","processOutputs","output","isReference","datatype","literalData","complexData","undefined","unmarshalOutputData","unmarshalGetStateResponse","mimeType","cont","parse","XMLSerializer","serializeToString","Error","dataType","unmarshalAsyncExecuteResponse","serverUrl","state","processSucceeded","processAccepted","processStarted","results","marshalExecBody","outputs","async","key","localPart","namespaceURI","prefix","string","dataInputs","marshalInputs","responseForm","marshalResponseForm","service","outputDefinitions","outputs_1","outputs_1_1","defType","asReference","responseDocument","storeExecuteResponse","inputArr","theInputs","inputArr_1","inputArr_1_1","inp","marshalledInput","marshalInput","input","inputType","_abstract","marshalReferenceInput","marshalDataInput","boundingBoxData","lowerCorner","lllat","lllon","upperCorner","urlat","urlon","marshallGetStatusBody","statusId","marshallGetResultBody","jobID","dismissUrl","jobId","marshalDismissBody","unmarshalDismissResponse","jsonResponse","isStatusInfo","obj","WpsMarshaller200","processSummary","summary","outputDescription","od","this_1","percentCompleted","TYPE_NAME","marshalOutputs","mode","transmission","delayedRetry","delayMs","maxRetries","attempts","src$","retryWhen","error$","delay","mergeMap","FakeCache","set","OWS_2_0","OWS_2_0_Factory.OWS_2_0","WPS_1_0_0","WPS_1_0_0_Factory.WPS_1_0_0","WPS_2_0","WPS_2_0_Factory.WPS_2_0","WpsClient","webclient","cache","wpsmarshaller","getRaw","describeProcess","executeAsync","pollingRate","tapFunction","query$","executeAsyncS","currentState","task$","predicate","doWhile","minWaitTime","tappedTask$","tap","polledRequest$","timer","pollUntil","getNextState","lastState","fetchResults","response_1","response_1_1","cachedQuery","switchMap","request$","execbody","xmlExecbody","marshalString","postRaw","xmlResponse","execBody","xmlExecBody","execute","dismiss","dismissBody","xmlDismissBody","xmlBody","post","share","Inject","ServicesOgcModule","NgModule","declarations","imports","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Jsonix } from '@boundlessgeo/jsonix';\r\nimport { map } from 'rxjs/operators';\r\nimport * as XLink_1_0_Factory from 'w3c-schemas/lib/XLink_1_0';\r\nconst XLink_1_0 = XLink_1_0_Factory.XLink_1_0;\r\nimport * as OWS_1_1_0_Factory from 'ogc-schemas/lib/OWS_1_1_0';\r\nconst OWS_1_1_0 = OWS_1_1_0_Factory.OWS_1_1_0;\r\nimport * as SMIL_2_0_Factory from 'ogc-schemas/lib/SMIL_2_0';\r\nconst SMIL_2_0 = SMIL_2_0_Factory.SMIL_2_0;\r\nimport * as SMIL_2_0_Language_Factory from 'ogc-schemas/lib/SMIL_2_0_Language';\r\nconst SMIL_2_0_Language = SMIL_2_0_Language_Factory.SMIL_2_0_Language;\r\nimport * as GML_3_1_1_Factory from 'ogc-schemas/lib/GML_3_1_1';\r\nconst GML_3_1_1 = GML_3_1_1_Factory.GML_3_1_1;\r\nimport * as WMTS_1_0_Factory from 'ogc-schemas/lib/WMTS_1_0';\r\nconst WMTS_1_0 = WMTS_1_0_Factory.WMTS_1_0;\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WmtsClientService {\r\n\r\n    private xmlmarshaller;\r\n    private xmlunmarshaller;\r\n\r\n    constructor(private http: HttpClient) {\r\n        const context = new Jsonix.Context([SMIL_2_0, SMIL_2_0_Language, GML_3_1_1, XLink_1_0, OWS_1_1_0, WMTS_1_0]);\r\n        this.xmlunmarshaller = context.createUnmarshaller();\r\n        this.xmlmarshaller = context.createMarshaller();\r\n    }\r\n\r\n    public getCapabilities (url: string, version = '1.1.0'): Observable<object> {\r\n        // example: https://tiles.geoservice.dlr.de/service/wmts?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=1.1.0\r\n        const getCapabilitiesUrl = `${url}?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=${version}`;\r\n        const headers = new HttpHeaders({\r\n            'Content-Type': 'text/xml',\r\n            'Accept': 'text/xml, application/xml'\r\n        });\r\n        return this.http.get(getCapabilitiesUrl, { headers, responseType: 'text' }).pipe(\r\n            map(response => {\r\n                return this.xmlunmarshaller.unmarshalString(response);\r\n            })\r\n        );\r\n    }\r\n\r\n}","\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  IOwsContext, IOwsResource, IOwsOffering, IOwsOperation, IOwsContent, WMS_Offering, WFS_Offering, WCS_Offering,\r\n  CSW_Offering, WMTS_Offering, GML_Offering, KML_Offering, GeoTIFF_Offering, GMLJP2_Offering, GMLCOV_Offering\r\n} from './types/owc-json';\r\nimport {\r\n  IEocOwsContext, IEocOwsResource, IEocOwsOffering, GeoJson_Offering, Xyz_Offering, IEocOwsWmtsOffering,\r\n  IEocWmsOffering, IEocOwsResourceDimension, IEocOwsWmtsMatrixSet\r\n} from './types/eoc-owc-json';\r\nimport {\r\n  ILayerGroupOptions, ILayerOptions, IRasterLayerOptions, VectorLayer, RasterLayer, IVectorLayerOptions,\r\n  Layer, TLayertype, WmsLayertype, WmtsLayertype, WfsLayertype, GeojsonLayertype, CustomLayer, CustomLayertype, XyzLayertype,\r\n  TRasterLayertype, isRasterLayertype, isVectorLayertype, TVectorLayertype, ILayerDimensions,\r\n  ILayerIntervalAndPeriod,\r\n  IWmtsParams,\r\n  WmtsLayer,\r\n  IWmtsOptions,\r\n  WmsLayer,\r\n  IWmsParams,\r\n  IWmsOptions,\r\n  IListMatrixSet\r\n} from '@ukis/services-layers';\r\nimport { TGeoExtent } from '@ukis/services-map-state';\r\nimport { WmtsClientService } from '../wmts/wmtsclient.service';\r\nimport { of, Observable, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\nexport function isWmsOffering(str: string): str is WMS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wms'\r\n    || str === 'http://schemas.opengis.net/wms/1.1.1'\r\n    || str === 'http://schemas.opengis.net/wms/1.1.0';\r\n}\r\nexport function isWfsOffering(str: string): str is WFS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wfs';\r\n}\r\nexport function isWpsOffering(str: string): str is WCS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wcs';\r\n}\r\nexport function isCswOffering(str: string): str is CSW_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/csw';\r\n}\r\nexport function isWmtsOffering(str: string): str is WMTS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wmts'\r\n    || str === 'http://schemas.opengis.net/wmts/1.0.0'\r\n    || str === 'http://schemas.opengis.net/wmts/1.1.0';\r\n}\r\nexport function isGmlOffering(str: string): str is GML_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gml';\r\n}\r\nexport function isKmlOffering(str: string): str is KML_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/kml';\r\n}\r\nexport function isGeoTIFFOffering(str: string): str is GeoTIFF_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/geotiff';\r\n}\r\nexport function isGMLJP2Offering(str: string): str is GMLJP2_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmljp2';\r\n}\r\nexport function isGMLCOVOffering(str: string): str is GMLCOV_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmlcov';\r\n}\r\nexport function isXyzOffering(str: string): str is Xyz_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/xyz';\r\n}\r\nexport function isGeoJsonOffering(str: string): str is GeoJson_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/geojson';\r\n}\r\nexport function shardsExpand(v: string) {\r\n  if (!v) { return; }\r\n  let o = []\r\n  for (let i in v.split(',')) {\r\n    var j = v.split(',')[i].split(\"-\")\r\n    if (j.length == 1) {\r\n      o.push(v.split(',')[i])\r\n    } else if (j.length == 2) {\r\n      let start = j[0].charCodeAt(0)\r\n      let end = j[1].charCodeAt(0)\r\n      if (start <= end) {\r\n        for (let k = start; k <= end; k++) {\r\n          o.push(String.fromCharCode(k).toLowerCase());\r\n        }\r\n      } else {\r\n        for (let k = start; k >= end; k--) {\r\n          o.push(String.fromCharCode(k).toLowerCase());\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return o\r\n}\r\n/**\r\n * OWS Context Service\r\n * OGC OWS Context Geo Encoding Standard Version: 1.0\r\n * http://docs.opengeospatial.org/is/14-055r2/14-055r2.html\r\n * http://www.owscontext.org/owc_user_guide/C0_userGuide.html\r\n *\r\n * This service allows you to read and write OWC-data.\r\n * We have added some custom fields to the OWC standard.\r\n *   - accepts the OWC-standard-datatypes as function inputs (so as to be as general as possible)\r\n *   - returns our extended OWC-datatypes as function outputs (so as to be as information-rich as possible)\r\n *\r\n */\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OwcJsonService {\r\n\r\n  constructor(private wmtsClient: WmtsClientService) {\r\n    //http://www.owscontext.org/owc_user_guide/C0_userGuide.html#truegeojson-encoding-2\r\n  }\r\n\r\n\r\n  checkContext(context: IOwsContext) {\r\n    let isContext_1_0;\r\n    if (!Array.isArray(context.properties.links)) {\r\n      isContext_1_0 = context.properties.links.profiles.find(item => item === 'http://www.opengis.net/spec/owc-geojson/1.0/req/core');\r\n    } else {\r\n      isContext_1_0 = context.properties.links.find(item => item.href === 'http://www.opengis.net/spec/owc-geojson/1.0/req/core');\r\n    }\r\n\r\n    if (!isContext_1_0) {\r\n      console.error('this is not a valid OWS Context v1.0!');\r\n\r\n    }\r\n    return isContext_1_0;\r\n  }\r\n\r\n  getContextTitle(context: IOwsContext) {\r\n    return context.properties.title;\r\n  }\r\n\r\n  getContextPublisher(context: IOwsContext) {\r\n    return (context.properties.publisher) ? context.properties.publisher : null;\r\n  }\r\n\r\n  getContextExtent(context: IOwsContext) {\r\n    return (context.bbox) ? context.bbox : null; // or [-180, -90, 180, 90];\r\n  }\r\n\r\n\r\n  getResources(context: IOwsContext) {\r\n    return context.features;\r\n  }\r\n\r\n  /** Resource --------------------------------------------------- */\r\n  getResourceTitle(resource: IOwsResource) {\r\n    return resource.properties.title;\r\n  }\r\n\r\n  getResourceUpdated(resource: IOwsResource) {\r\n    return resource.properties.updated;\r\n  }\r\n\r\n  getResourceDate(resource: IOwsResource) {\r\n    return (resource.properties.date) ? resource.properties.date : null;\r\n  }\r\n\r\n  getResourceOfferings(resource: IOwsResource) {\r\n    return (resource.properties.offerings) ? resource.properties.offerings : null;\r\n  }\r\n\r\n  /**\r\n   * retrieve layer status active / inactive based on IOwsResource\r\n   * @param resource: IOwsResource\r\n   */\r\n  isActive(resource: IOwsResource) {\r\n    let active = true;\r\n    if (resource.properties.hasOwnProperty('active')) {\r\n      active = resource.properties.active;\r\n    }\r\n    return active;\r\n  }\r\n\r\n  getResourceOpacity(resource: IOwsResource): number {\r\n    let opacity = 1;\r\n    if (resource.properties.hasOwnProperty('opacity')) {\r\n      opacity = resource.properties.opacity;\r\n    }\r\n    return opacity;\r\n  }\r\n\r\n  getResourceAttribution(resource: IOwsResource): string {\r\n    let attribution = '';\r\n    if (resource.properties.hasOwnProperty('attribution')) {\r\n      attribution = resource.properties.attribution;\r\n    }\r\n    return attribution;\r\n  }\r\n\r\n  getResourceShards(resource: IOwsResource): string {\r\n    if (resource.properties.hasOwnProperty('shards')) {\r\n      return resource.properties.shards;\r\n    }\r\n  }\r\n\r\n  convertOwcTimeToIsoTimeAndPeriodicity(owctime: string): ILayerIntervalAndPeriod | string {\r\n    /**\r\n     Convert from\r\n    */\r\n    let arr = owctime.split('/');\r\n    let t = (arr.length == 3) ? arr[0] + '/' + arr[1] : owctime;\r\n    let p = (arr.length == 3) ? arr[2] : null;\r\n    if (p) {\r\n      return { \"interval\": t, \"periodicity\": p };\r\n    }\r\n    else {\r\n      return t\r\n    }\r\n  }\r\n\r\n  getResourceDimensions(resource: IOwsResource): ILayerDimensions {\r\n    if (!resource.properties.hasOwnProperty('dimensions')) {\r\n      return undefined;\r\n    }\r\n    let dims = {}\r\n\r\n    let dimensions = {}\r\n    if (Array.isArray(resource.properties.dimensions)) {\r\n      for (let d of resource.properties.dimensions) {\r\n        dimensions[d.name] = d\r\n      }\r\n    } else {\r\n      dimensions = resource.properties.dimensions\r\n    }\r\n    for (let name in dimensions) {\r\n      let dim = {}\r\n      console.log(name)\r\n      if (name === \"time\" || dimensions[name].units == \"ISO8601\") {\r\n        let value = dimensions[name].value\r\n        let values = (value) ? value.split(',').map((v: string) => this.convertOwcTimeToIsoTimeAndPeriodicity(v)) : null\r\n        dim = {\r\n          \"values\": ((!values) || values.length > 1) ? values : values[0],\r\n          \"units\": dimensions[name].units,\r\n          \"display\": {\r\n            \"format\": \"YYYMMDD\",\r\n            \"period\": dimensions[name].display,\r\n            \"default\": \"end\"\r\n          }\r\n        }\r\n      }\r\n      else if (name === \"elevation\") {\r\n        dim = dimensions[name];\r\n      }\r\n      else {\r\n        dim = dimensions[name];\r\n      }\r\n      dims[name] = dim;\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  /** Offering --------------------------------------------------- */\r\n  getLayertypeFromOfferingCode(offering: IOwsOffering): TLayertype {\r\n    if (isWmsOffering(offering.code)) {\r\n      return WmsLayertype;\r\n    } else if (isWmtsOffering(offering.code)) {\r\n      return WmtsLayertype;\r\n    } else if (isWfsOffering(offering.code)) {\r\n      return WfsLayertype;\r\n    } else if (isGeoJsonOffering(offering.code)) {\r\n      return GeojsonLayertype;\r\n    } else if (isXyzOffering(offering.code)) {\r\n      return XyzLayertype;\r\n    } else {\r\n      return offering.code; // an offering can also be any other string.\r\n    }\r\n  }\r\n\r\n  checkIfServiceOffering(offering: IOwsOffering): boolean {\r\n    return (!offering.contents && offering.operations) ? true : false;\r\n  }\r\n\r\n  checkIfDataOffering(offering: IOwsOffering): boolean {\r\n    return (offering.contents && !offering.operations) ? true : false;\r\n  }\r\n\r\n  getOfferingContents(offering: IOwsOffering): IOwsOperation[] | IOwsContent[] {\r\n    if (this.checkIfServiceOffering(offering)) {\r\n      return offering.operations;\r\n    } else if (this.checkIfDataOffering(offering)) {\r\n      return offering.contents;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function to extract legendURL from project specific ows Context\r\n   * @param offering layer offering\r\n   */\r\n  getLegendUrl(offering: IOwsOffering) {\r\n    let legendUrl = '';\r\n\r\n    if (offering.hasOwnProperty('styles')) {\r\n      let defaultStyle = offering.styles.filter(style => style.default);\r\n      if (defaultStyle.length > 0) {\r\n        return defaultStyle[0].legendURL;\r\n      }\r\n    } else if (offering.hasOwnProperty('legendUrl')) {\r\n      legendUrl = offering.legendUrl;\r\n    }\r\n    return legendUrl;\r\n  }\r\n\r\n  /**\r\n   * retrieve iconUrl based on IOwsOffering\r\n   * @param offering\r\n   */\r\n  getIconUrl(offering: IOwsOffering) {\r\n    let iconUrl = '';\r\n    if (offering.hasOwnProperty('iconUrl')) {\r\n      iconUrl = offering.iconUrl;\r\n    }\r\n    return iconUrl;\r\n  }\r\n\r\n  /**\r\n   * layer priority: first wms, then wmts, then wfs, then others.\r\n   */\r\n  public getLayers(owc: IOwsContext, targetProjection: string): Observable<Layer[]> {\r\n    const resources = owc.features;\r\n    const layers$: Observable<Layer>[] = [];\r\n\r\n    for (const resource of resources) {\r\n      const offerings = resource.properties.offerings;\r\n      if (offerings.length > 0) {\r\n        const offering = offerings.find(o => isWmsOffering(o.code))\r\n          || offerings.find(o => isWmtsOffering(o.code))\r\n          || offerings.find(o => isWfsOffering(o.code))\r\n          || offerings[0];\r\n        layers$.push(this.createLayerFromOffering(offering, resource, owc, targetProjection));\r\n      }\r\n    }\r\n\r\n    return forkJoin(layers$);\r\n  }\r\n\r\n  createLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<Layer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n    if (isRasterLayertype(layerType)) {\r\n      return this.createRasterLayerFromOffering(offering, resource, context, targetProjection);\r\n    } else if (isVectorLayertype(layerType)) {\r\n      return this.createVectorLayerFromOffering(offering, resource, context);\r\n    } else {\r\n      console.error(`This type of service (${layerType}) has not been implemented yet.`);\r\n    }\r\n  }\r\n\r\n  createVectorLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context?: IOwsContext): Observable<VectorLayer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n\r\n    if (!isVectorLayertype(layerType)) {\r\n      console.error(`This type of layer '${layerType}' / offering '${offering.code}' cannot be converted into a Vectorlayer`);\r\n      return null;\r\n    }\r\n\r\n    const iconUrl = this.getIconUrl(offering);\r\n\r\n    let layerUrl, params;\r\n    // if we have a operations-offering (vs. a data-offering):\r\n    if (offering.operations) layerUrl = this.getUrlFromUri(offering.operations[0].href);\r\n    if (offering.operations) params = this.getJsonFromUri(offering.operations[0].href);\r\n\r\n    let data;\r\n    // if we have a data-offering: \r\n    if (offering.contents) {\r\n      data = offering.contents[0].content;\r\n    }\r\n\r\n    let legendUrl = this.getLegendUrl(offering);\r\n\r\n    let layerOptions: IVectorLayerOptions = {\r\n      id: resource.id as string,\r\n      name: this.getResourceTitle(resource),\r\n      displayName: this.getDisplayName(offering, resource),\r\n      visible: this.isActive(resource),\r\n      type: layerType,\r\n      removable: true,\r\n      attribution: this.getResourceAttribution(resource),\r\n      continuousWorld: false,\r\n      opacity: this.getResourceOpacity(resource),\r\n      url: layerUrl ? layerUrl : null,\r\n      legendImg: legendUrl ? legendUrl : null,\r\n      data: data\r\n    };\r\n\r\n\r\n    const layer = new VectorLayer(layerOptions);\r\n\r\n    if (resource.bbox) {\r\n      layer.bbox = resource.bbox;\r\n    } else if (context && context.bbox) {\r\n      layer.bbox = context.bbox;\r\n    }\r\n\r\n    return of(layer);\r\n  }\r\n\r\n  createRasterLayerFromOffering(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<RasterLayer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n\r\n    if (!isRasterLayertype(layerType)) {\r\n      console.error(`This type of offering '${offering.code}' cannot be converted into a rasterlayer.`);\r\n      return null;\r\n    }\r\n\r\n    let rasterLayer$: Observable<RasterLayer>;\r\n    switch (layerType) {\r\n      case WmsLayertype:\r\n        rasterLayer$ = this.createWmsLayerFromOffering(offering, resource, context);\r\n        break;\r\n      case WmtsLayertype:\r\n        rasterLayer$ = this.createWmtsLayerFromOffering(offering, resource, context, targetProjection);\r\n        break;\r\n      case XyzLayertype:\r\n        // @TODO\r\n        break;\r\n      case CustomLayertype:\r\n        // custom layers are meant to be userdefined and not easily encoded in a OWC.\r\n        break;\r\n    }\r\n\r\n    return rasterLayer$;\r\n  }\r\n\r\n  private createWmtsLayerFromOffering(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<WmtsLayer> {\r\n    return this.getWmtsOptions(offering, resource, context, targetProjection).pipe(map((options: IWmtsOptions) => {\r\n      const layer = new WmtsLayer(options);\r\n      return layer;\r\n    }));\r\n  }\r\n\r\n  private createWmsLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): Observable<WmsLayer> {\r\n    const options: IWmsOptions = this.getWmsOptions(offering, resource, context);\r\n    const layer = new WmsLayer(options);\r\n    return of(layer);\r\n  }\r\n\r\n  private getWmtsOptions(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<IWmtsOptions> {\r\n    const rasterOptions: IRasterLayerOptions = this.getRasterLayerOptions(offering, resource, context);\r\n\r\n    const layer = this.getLayerForWMTS(offering, resource);\r\n\r\n    let style: string;\r\n    if (offering.styles) {\r\n      const styleInfo = offering.styles.find(s => s.default);\r\n      if (styleInfo) {\r\n        style = styleInfo.name;\r\n      }\r\n    }\r\n\r\n    return this.getMatrixSetForWMTS(offering, resource, targetProjection).pipe(map(((matrixSet: IEocOwsWmtsMatrixSet) => {\r\n      const matrixSetOptions: IListMatrixSet = {\r\n        matrixSet: matrixSet.matrixSet,\r\n        matrixIds: matrixSet.matrixIds,\r\n        resolutions: matrixSet.resolutions\r\n      };\r\n      const wmtsOptions: IWmtsOptions = {\r\n        ...rasterOptions,\r\n        type: 'wmts',\r\n        params: {\r\n          layer: layer,\r\n          matrixSetOptions: matrixSetOptions,\r\n          projection: targetProjection,\r\n          style: style,\r\n          format: 'image/png'\r\n        }\r\n      };\r\n      return wmtsOptions;\r\n    })));\r\n  }\r\n\r\n  private getLayerForWMTS(offering: IOwsOffering, resource: IOwsResource): string {\r\n    const [url, urlParams] = this.parseOperationUrl(offering, 'GetTile');\r\n    if (urlParams['LAYER']) {\r\n      return urlParams['LAYER'];\r\n    } else {\r\n      console.error(`There is no layer-parameter in the offering ${offering.code} for resource ${resource.id}.\r\n      Cannot infer layer.`, offering);\r\n    }\r\n  }\r\n\r\n  private parseOperationUrl(offering: IOwsOffering, opCode: string): [string, object] {\r\n    if (offering.operations) {\r\n      const operation = offering.operations.find(op => op.code === opCode);\r\n      if (operation) {\r\n        const url = this.getUrlFromUri(operation.href);\r\n        const urlParams = this.getJsonFromUri(operation.href);\r\n        return [url, urlParams];\r\n      } else {\r\n        console.error(`There is no ${opCode}-operation in the offering ${offering.code}.`, offering);\r\n      }\r\n    } else {\r\n      console.error(`The offering ${offering.code} has no operations.`, offering);\r\n    }\r\n  }\r\n\r\n  private getMatrixSetForWMTS(offering: IOwsOffering, resource: IOwsResource, targetProjection: string): Observable<IEocOwsWmtsMatrixSet> {\r\n    if (offering.matrixSets) {\r\n      const matrixSet = offering.matrixSets.find(m => m.srs === targetProjection);\r\n      return of(matrixSet);\r\n    } else {\r\n      const [url, urlParams] = this.parseOperationUrl(offering, 'GetCapabilities');\r\n      return this.wmtsClient.getCapabilities(url).pipe(\r\n        map((capabilities: object) => {\r\n          const matrixSets = capabilities['value']['contents']['tileMatrixSet'];\r\n          const matrixSet = matrixSets.find(ms => ms['identifier']['value'] === targetProjection);\r\n          const owsMatrixSet: IEocOwsWmtsMatrixSet = {\r\n            srs: targetProjection,\r\n            matrixSet: matrixSet['identifier']['value'],\r\n            matrixIds: matrixSet['tileMatrix'].map(tm => tm['identifier']['value']),\r\n            resolutions: matrixSet['tileMatrix'].map(tm => tm['scaleDenominator']),\r\n            origin: {\r\n              x: matrixSet['tileMatrix'][0]['topLeftCorner'][1],\r\n              y: matrixSet['tileMatrix'][0]['topLeftCorner'][0]\r\n            },\r\n            tilesize: matrixSet['tileMatrix'][0]['tileHeight']\r\n          };\r\n          return owsMatrixSet;\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getWmsOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): IWmsOptions {\r\n    const rasterOptions: IRasterLayerOptions = this.getRasterLayerOptions(offering, resource, context);\r\n    if (rasterOptions.type === WmsLayertype) {\r\n\r\n      const urlParams = this.getJsonFromUri(offering.operations[0].href);\r\n      let defaultStyle;\r\n      if (offering.styles) {\r\n        defaultStyle = offering.styles.find(s => s.default).name;\r\n      }\r\n\r\n      const params: IWmsParams = {\r\n        LAYERS: urlParams['LAYERS'],\r\n        FORMAT: urlParams['FORMAT'],\r\n        TIME: urlParams['TIME'],\r\n        VERSION: urlParams['VERSION'],\r\n        TILED: urlParams['TILED'],\r\n        TRANSPARENT: true,\r\n        STYLES: defaultStyle\r\n      };\r\n\r\n      const wmsOptions: IWmsOptions = {\r\n        ...rasterOptions,\r\n        type: 'wms',\r\n        params: params\r\n      };\r\n      return wmsOptions;\r\n    } else {\r\n      console.error(`resource ${resource.id} cannot be converted into a WMS-Layer`, offering);\r\n    }\r\n  }\r\n\r\n  private getRasterLayerOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): IRasterLayerOptions {\r\n    const layerOptions: ILayerOptions = this.getLayerOptions(offering, resource, context);\r\n    if (isRasterLayertype(layerOptions.type)) {\r\n      const rasterLayerOptions: IRasterLayerOptions = {\r\n        ...layerOptions,\r\n        type: layerOptions.type as TRasterLayertype,\r\n        url: this.getUrlFromUri(offering.operations[0].href),\r\n        subdomains: shardsExpand(this.getResourceShards(resource))\r\n      };\r\n      return rasterLayerOptions;\r\n    } else {\r\n      console.error(`The layer ${layerOptions.id} is not a rasterlayer`, layerOptions);\r\n    }\r\n  }\r\n\r\n  private getLayerOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): ILayerOptions {\r\n    const layerOptions: ILayerOptions = {\r\n      id: resource.id as string,\r\n      type: this.getLayertypeFromOfferingCode(offering),\r\n      name: this.getResourceTitle(resource),\r\n      removable: true,\r\n      continuousWorld: false,\r\n      opacity: this.getResourceOpacity(resource),\r\n      displayName: this.getDisplayName(offering, resource),\r\n      visible: this.isActive(resource),\r\n      attribution: this.getResourceAttribution(resource),\r\n      dimensions: this.getResourceDimensions(resource),\r\n      legendImg: this.getLegendUrl(offering),\r\n      styles: offering.styles\r\n    };\r\n\r\n    if (resource.bbox) {\r\n      layerOptions.bbox = resource.bbox;\r\n    } else if (context && context.bbox) {\r\n      layerOptions.bbox = context.bbox;\r\n    }\r\n\r\n    return layerOptions;\r\n  }\r\n\r\n  /** Misc --------------------------------------------------- */\r\n\r\n  private getUrlFromUri(uri: string) {\r\n    return uri.substring(0, uri.indexOf('?'));\r\n  }\r\n\r\n  /**\r\n   * helper to pack query-parameters of a uri into a JSON\r\n   * @param uri any uri with query-parameters\r\n   */\r\n  private getJsonFromUri(uri: string): object {\r\n    const query = uri.substr(uri.lastIndexOf('?') + 1);\r\n    const result = {};\r\n    query.split('&').forEach(function (part) {\r\n      const item = part.split('=');\r\n      result[item[0].toUpperCase()] = decodeURIComponent(item[1]);\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * retrieve display name of layer, based on IOwsResource and IOwsOffering\r\n   * @param offering\r\n   * @param resource\r\n   */\r\n  private getDisplayName(offering: IOwsOffering, resource: IOwsResource) {\r\n    let displayName = '';\r\n    if (offering.hasOwnProperty('title')) {\r\n      if (offering.title) {\r\n        displayName = offering.title;\r\n      } else {\r\n        displayName = this.getResourceTitle(resource);\r\n      }\r\n    }\r\n    return displayName;\r\n  }\r\n\r\n\r\n  /**------------ DATA TO FILE -----------------------------------------*/\r\n\r\n\r\n  /**\r\n   * @TODO:\r\n   *   - properties\r\n   */\r\n  generateOwsContextFrom(id: string, layers: Layer[], extent?: TGeoExtent, properties?): IEocOwsContext {\r\n\r\n    if (!properties) {\r\n      properties = {\r\n        lang: '',\r\n        links: [],\r\n        title: '',\r\n        updated: ''\r\n      };\r\n    }\r\n\r\n    let owc: IEocOwsContext = {\r\n      'id': id,\r\n      'type': 'FeatureCollection',\r\n      'properties': properties,\r\n      'features': []\r\n    };\r\n\r\n    if (extent) {\r\n      owc['bbox'] = extent;\r\n    }\r\n\r\n    for (let layer of layers) {\r\n      let resource: IEocOwsResource = this.generateResourceFromLayer(layer);\r\n      // TODO check for layer types\r\n      owc.features.push(resource);\r\n    }\r\n\r\n    return owc;\r\n  }\r\n\r\n  generateResourceFromLayer(layer: Layer): IEocOwsResource {\r\n    let resource: IEocOwsResource = {\r\n      'id': layer.id,\r\n      'properties': {\r\n        title: layer.name,\r\n        updated: null,\r\n        offerings: [this.generateOfferingFromLayer(layer)],\r\n        opacity: layer.opacity,\r\n        attribution: layer.attribution,\r\n      },\r\n      'type': 'Feature',\r\n      'geometry': null\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  generateOfferingFromLayer(layer: Layer, legendUrl?: string, iconUrl?: string): IEocOwsOffering {\r\n    let offering: IEocOwsOffering = {\r\n      'code': this.getOfferingCodeFromLayer(layer),\r\n      'title': layer.name\r\n    };\r\n\r\n    if (layer.type == GeojsonLayertype) {\r\n      offering.contents = this.getContentsFromLayer(layer as VectorLayer);\r\n    } else {\r\n      offering.operations = this.getOperationsFromLayer(layer);\r\n    }\r\n\r\n    if (legendUrl) offering.legendUrl = legendUrl;\r\n    if (iconUrl) offering.iconUrl = iconUrl;\r\n\r\n    return offering;\r\n  }\r\n\r\n  getOfferingCodeFromLayer(layer: Layer): string {\r\n    switch (layer.type) {\r\n      case WmsLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/wms';\r\n      case WmtsLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/wmts';\r\n      case GeojsonLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/geojson';\r\n      case XyzLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/xyz';\r\n      default:\r\n        console.error(`This type of layer (${layer.type}) has not been implemented yet.`);\r\n        return null;\r\n    }\r\n  }\r\n\r\n  getContentsFromLayer(layer: VectorLayer): IOwsContent[] {\r\n    let contents = [];\r\n    switch (layer.type) {\r\n      case GeojsonLayertype:\r\n        let content = {\r\n          type: 'FeatureCollection',\r\n          content: JSON.stringify(layer.data)\r\n        };\r\n        contents.push(content);\r\n        break;\r\n      default:\r\n        console.error(`Cannot get contents for this type of vectorlayer: (${layer.type})`);\r\n    }\r\n    return contents;\r\n  }\r\n\r\n  getOperationsFromLayer(layer: Layer): IOwsOperation[] {\r\n    if (layer instanceof RasterLayer) {\r\n      switch (layer.type) {\r\n        case WmsLayertype:\r\n          return this.getWmsOperationsFromLayer(layer);\r\n        case WmtsLayertype:\r\n          return this.getWmtsOperationsFromLayer(layer);\r\n        case XyzLayertype:\r\n          return this.getXyzOperationsFromLayer(layer);\r\n        default:\r\n          console.error(`Cannot get operations for this type of layer: (${layer.type})`);\r\n          return [];\r\n      }\r\n    }\r\n\r\n    else if (layer instanceof VectorLayer) {\r\n      switch (layer.type) {\r\n        // case 'wfs': <--- this type of layer has not been implemented yet in datatypes-layers/Layers.ts \r\n        //   return this.getWfsOperationsFromLayer(layer);\r\n        default:\r\n          console.error(`This type of service (${layer.type}) has not been implemented yet.`);\r\n          return [];\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  getXyzOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n    let restCall: IOwsOperation = {\r\n      'code': 'REST',\r\n      'method': 'GET',\r\n      'type': 'text/html',\r\n      'href': `${layer.url}`\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      restCall\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n  getTmsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n    // @TODO: what operations are defined on TMS? https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification\r\n    return [];\r\n  }\r\n\r\n\r\n  getWfsOperationsFromLayer(layer: VectorLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let layerName = layer.name;\r\n    let version = layer.options.version ? layer.options.version : '1.1.0';\r\n\r\n\r\n    let GetFeature: IOwsOperation = {\r\n      'code': 'GetFeature',\r\n      'method': 'GET',\r\n      'type': 'application/json',\r\n      'href': `${url}?service=WFS&version=${version}&request=GetFeature`\r\n    };\r\n\r\n    // let DescribeFeatureType: IOwsOperation = null;\r\n    // let GetCapabilities: IOwsOperation = null;\r\n    // let GetPropertyValue: IOwsOperation = null;\r\n    // let GetFeatureWithLock: IOwsOperation = null;\r\n    // let LockFeature: IOwsOperation = null;\r\n    // let Transaction: IOwsOperation = null;\r\n    // let CreateStoredQuery: IOwsOperation = null;\r\n    // let DropStoredQuery: IOwsOperation = null;\r\n    // let ListStoredQueries: IOwsOperation = null;\r\n    // let DescribeStoredQueries: IOwsOperation = null;\r\n\r\n    let operations = [\r\n      GetFeature,\r\n      // GetCapabilities,\r\n      // DescribeFeatureType,\r\n      // GetPropertyValue,\r\n      // GetFeatureWithLock,\r\n      // LockFeature,\r\n      // Transaction,\r\n      // CreateStoredQuery,\r\n      // DropStoredQuery,\r\n      // ListStoredQueries,\r\n      // DescribeStoredQueries\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n\r\n  getWmsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let wmsVersion = layer.params.VERSION;\r\n    let layerName = layer.name;\r\n    let layerId = layer.id;\r\n    let format = 'image/vnd.jpeg-png';\r\n    if (layer.params && layer.params.FORMAT) format = layer.params.FORMAT;\r\n\r\n    let getMap: IOwsOperation = {\r\n      'code': 'GetMap',\r\n      'method': 'GET',\r\n      'type': format,\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetMap&TRANSPARENT=TRUE&LAYERS=${layerId}&FORMAT=${format}&TILED=true`\r\n    };\r\n\r\n    let getCapabilities: IOwsOperation = {\r\n      'code': 'GetCapabilities',\r\n      'method': 'GET',\r\n      'type': 'application/xml',\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetCapabilities`\r\n    }\r\n\r\n    let getFeatureInfo: IOwsOperation = {\r\n      'code': 'GetFeatureInfo',\r\n      'method': 'GET',\r\n      'type': 'text/html',\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetFeatureInfo&TRANSPARENT=TRUE&LAYERS=${layerId}&FORMAT=${format}`\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      getMap,\r\n      getCapabilities,\r\n      getFeatureInfo\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n  getWmtsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let wmtsVersion = layer.params.version;\r\n    let layerName = layer.name;\r\n    let layerId = layer.id;\r\n    let format = 'image/vnd.jpeg-png';\r\n    if (layer.params && layer.params.FORMAT) format = layer.params.FORMAT;\r\n\r\n    let getTile: IOwsOperation = {\r\n      'code': 'GetTile',\r\n      'href': `${url}?SERVICE=WMTS&REQUEST=GetTile&FORMAT=${format}&LAYER=${layerId}&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': format\r\n    };\r\n\r\n    let getCapabilities: IOwsOperation = {\r\n      'code': 'GetCapabilities',\r\n      'href': `${url}?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': 'application/xml'\r\n    }\r\n\r\n    // Note: we deliberately use the WMS protocol here instead of WMTS.\r\n    // Reason: WMTS delivers RGB-values, wheras WMS delivers the actual value that was used to create a tile.\r\n    let getFeatureInfo: IOwsOperation = {\r\n      'code': 'GetFeatureInfo',\r\n      'href': `${url}?SERVICE=WMS&REQUEST=GetFeatureInfo&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': 'text/html'\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      getTile,\r\n      getCapabilities,\r\n      getFeatureInfo\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n}\r\n","import { WpsMarshaller, WpsInput, WpsOutputDescription, WpsResult, WpsCapability, WpsBboxValue, WpsData, WpsDataDescription, WpsState, WpsDataFormat } from '../wps_datatypes';\r\nimport {\r\n    WPSCapabilitiesType, IWpsExecuteProcessBody, Execute, DataInputsType,\r\n    InputType, ResponseFormType, DataType, IWpsExecuteResponse, DocumentOutputDefinitionType,\r\n    ResponseDocumentType, InputReferenceType, LiteralDataType, ExecuteResponse\r\n} from './wps_1.0.0';\r\n\r\n\r\n\r\nexport class WpsMarshaller100 implements WpsMarshaller {\r\n\r\n    constructor() { }\r\n\r\n    getCapabilitiesUrl(baseurl: string): string {\r\n        return `${baseurl}?service=WPS&request=GetCapabilities&version=1.0.0`;\r\n    }\r\n\r\n    executeUrl(baseurl: string, processId: string): string {\r\n        return `${baseurl}?service=WPS&request=Execute&version=1.0.0&identifier=${processId}`;\r\n    }\r\n\r\n    unmarshalCapabilities(capabilities: WPSCapabilitiesType): WpsCapability[] {\r\n        const out: WpsCapability[] = [];\r\n        capabilities.processOfferings.process.forEach(process => {\r\n            out.push({\r\n                id: process.identifier.value\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    unmarshalSyncExecuteResponse(responseJson: IWpsExecuteResponse, url: string, processId: string,\r\n        inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[] {\r\n\r\n        const out: WpsResult[] = [];\r\n\r\n        if (responseJson.value.status.processFailed) { // Failure?\r\n            out.push({\r\n                description: {\r\n                    id: responseJson.value.process.identifier.value,\r\n                    reference: true,\r\n                    type: 'error'\r\n                },\r\n                value: responseJson.value.statusLocation\r\n            });\r\n        } else if (responseJson.value.processOutputs) { // synchronous request?\r\n            for (const output of responseJson.value.processOutputs.output) {\r\n                const isReference = output.reference ? true : false;\r\n\r\n                let datatype: 'literal' | 'complex' | 'bbox' | 'status' | 'error';\r\n                let data;\r\n                let format: WpsDataFormat | undefined;\r\n                if (output.reference) {\r\n                    datatype = 'complex';\r\n                    data = output.reference.href || null;\r\n                    format = output.reference.mimeType as WpsDataFormat;\r\n                } else {\r\n                    if (output.data && output.data.literalData) {\r\n                        datatype = 'literal';\r\n                        format = output.data.literalData.dataType as WpsDataFormat;\r\n                    } else if (output.data && output.data.complexData) {\r\n                        datatype = 'complex';\r\n                        format = output.data.complexData.mimeType as WpsDataFormat;\r\n                    } else {\r\n                        datatype = 'bbox';\r\n                        format = undefined;\r\n                    }\r\n                    // @ts-ignore\r\n                    data = this.unmarshalOutputData(output.data);\r\n                }\r\n\r\n                out.push({\r\n                    description: {\r\n                        id: output.identifier.value,\r\n                        format: format,\r\n                        reference: isReference,\r\n                        type: datatype\r\n                    },\r\n                    value: data,\r\n                });\r\n            }\r\n        } else if (responseJson.value.statusLocation) { // asynchronous request?\r\n            out.push({\r\n                description: {\r\n                    id: responseJson.value.process.identifier.value,\r\n                    reference: true,\r\n                    type: 'status'\r\n                },\r\n                value: this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions)\r\n            });\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    protected unmarshalOutputData(data: DataType): any {\r\n        if (data.complexData) {\r\n            switch (data.complexData.mimeType) {\r\n                case 'application/vnd.geo+json':\r\n                case 'application/json':\r\n                    return data.complexData.content.map(cont => JSON.parse(cont));\r\n                case 'application/WMS':\r\n                    return data.complexData.content;\r\n                case 'text/xml':\r\n                    return new XMLSerializer().serializeToString(data.complexData.content[0]); // @TODO: better: handle actual xml-data\r\n                default:\r\n                    throw new Error(`Cannot unmarshal data of format ${data.complexData.mimeType}`);\r\n            }\r\n        } else if (data.literalData) {\r\n            switch (data.literalData.dataType) {\r\n                case 'string':\r\n                default:\r\n                    return data.literalData.value;\r\n            }\r\n        }\r\n\r\n        throw new Error(`Not yet implemented: ${data}`);\r\n    }\r\n\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        return this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions);\r\n    }\r\n\r\n    unmarshalGetStateResponse(responseJson: any, serverUrl: string, processId: string,\r\n        inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n\r\n        const response: ExecuteResponse = responseJson.value;\r\n        \r\n        const status = response.status.processSucceeded ? 'Succeeded' :\r\n        response.status.processAccepted ? 'Accepted' :\r\n        response.status.processStarted ? 'Running' :\r\n        response.status.processFailed ? 'Failed' :\r\n        'Failed';\r\n        \r\n        const state: WpsState = {\r\n            status: status,\r\n            statusLocation: response.statusLocation,\r\n        };\r\n\r\n        if (response.processOutputs && response.processOutputs.output) {\r\n            state.results = this.unmarshalSyncExecuteResponse(responseJson, serverUrl, processId, inputs, outputDescriptions);\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean): IWpsExecuteProcessBody {\r\n\r\n        const wps1Inputs = this.marshalInputs(inputs);\r\n        const wps1ResponseForm = this.marshalResponseForm(outputs, async);\r\n\r\n        const bodyValue: Execute = {\r\n            dataInputs: wps1Inputs,\r\n            identifier: processId,\r\n            responseForm: wps1ResponseForm,\r\n            service: 'WPS',\r\n            version: '1.0.0'\r\n        };\r\n\r\n        const body: IWpsExecuteProcessBody = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/1.0.0}Execute',\r\n                localPart: 'Execute',\r\n                namespaceURI: 'http://www.opengis.net/wps/1.0.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/1.0.0}wps:Execute'\r\n            },\r\n            value: bodyValue\r\n        };\r\n\r\n        return body;\r\n\r\n    }\r\n\r\n\r\n    protected marshalResponseForm(outputs: WpsOutputDescription[], async = false): ResponseFormType {\r\n\r\n        const outputDefinitions: DocumentOutputDefinitionType[] = [];\r\n        for (const output of outputs) {\r\n            let defType: DocumentOutputDefinitionType;\r\n            switch (output.type) {\r\n                case 'literal':\r\n                    defType = {\r\n                        identifier: { value: output.id },\r\n                        asReference: output.reference,\r\n                        mimeType: output.format\r\n                    };\r\n                    break;\r\n                case 'complex':\r\n                    defType = {\r\n                        identifier: { value: output.id },\r\n                        asReference: output.reference,\r\n                        mimeType: output.format\r\n                    };\r\n                    break;\r\n                default:\r\n                    throw new Error(`This Wps-outputtype has not been implemented yet! ${output} `);\r\n            }\r\n            outputDefinitions.push(defType);\r\n        }\r\n\r\n        const responseDocument: ResponseDocumentType = {\r\n            output: outputDefinitions,\r\n            status: async ? true : false,\r\n            storeExecuteResponse: async ? true : false\r\n        };\r\n\r\n        const form: ResponseFormType = {\r\n            responseDocument\r\n        };\r\n        return form;\r\n    }\r\n\r\n\r\n    protected marshalInputs(inputArr: WpsInput[]): DataInputsType {\r\n        const theInputs: InputType[] = [];\r\n        for (const inp of inputArr) {\r\n            if (inp.value === null || inp.value === undefined) {\r\n                throw new Error(`Value for input ${inp.description.id} is not set`);\r\n            }\r\n            const marshalledInput = this.marshalInput(inp);\r\n            theInputs.push(marshalledInput);\r\n        }\r\n        const inputs: DataInputsType = {\r\n            input: theInputs\r\n        };\r\n        return inputs;\r\n    }\r\n\r\n    protected marshalInput(input: WpsInput): InputType {\r\n        const id = input.description.id;\r\n        const title = input.description.id;\r\n        const abstract = '';\r\n\r\n        const inputType: InputType = {\r\n            identifier: { value: id },\r\n            title: { value: title },\r\n            _abstract: { value: abstract }\r\n        };\r\n\r\n        if (input.description.reference) {\r\n            inputType.reference = this.marshalReferenceInput(input);\r\n        } else {\r\n            inputType.data = this.marshalDataInput(input);\r\n        }\r\n\r\n        return inputType;\r\n    }\r\n\r\n    protected marshalDataInput(input: WpsInput): DataType {\r\n        let data: DataType;\r\n        switch (input.description.type) {\r\n            case 'literal':\r\n                data = {\r\n                    literalData: { value: String(input.value) }\r\n                };\r\n                break;\r\n            case 'bbox':\r\n                const values: WpsBboxValue = input.value;\r\n                data = {\r\n                    boundingBoxData: {\r\n                        lowerCorner: [values.lllat, values.lllon],\r\n                        upperCorner: [values.urlat, values.urlon]\r\n                    }\r\n                };\r\n                break;\r\n            case 'complex':\r\n                switch (input.description.format) {\r\n                    case 'text/xml':\r\n                        data = {\r\n                            complexData: {\r\n                                content: [input.value],  // @TODO: we assume here that text/xml-data is already stringified\r\n                                mimeType: input.description.format\r\n                            }\r\n                        };\r\n                        break;\r\n                    default:\r\n                        data = {\r\n                            complexData: {\r\n                                content: [JSON.stringify(input.value)],\r\n                                mimeType: input.description.format\r\n                            }\r\n                        };\r\n                }\r\n                break;\r\n            default:\r\n                throw Error(`This input is of type ${input.description.type}. We can only marshal input of type literal, bbox or complex.`);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    protected marshalReferenceInput(input: WpsInput): InputReferenceType {\r\n        const ref: InputReferenceType = {\r\n            href: input.value,\r\n            method: 'GET',\r\n            mimeType: input.description.format\r\n        };\r\n        return ref;\r\n    }\r\n\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string) {\r\n        // WPS-1.0 does not send a body with a GetStatus request.\r\n        return {};\r\n    }\r\n\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string) {\r\n        // WPS-1.0 does not send a body with a GetStatus request.\r\n        return {};\r\n    }\r\n\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string {\r\n        /** this does only work in geoserver:\r\n        return `${serverUrl}?service=WPS&version=1.0.0&request=Dismiss&executionId=${jobId}`; */\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n\r\n    marshalDismissBody(processId: string) {\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n\r\n    unmarshalDismissResponse(jsonResponse: any, serverUrl: string, processId: string): WpsState {\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n}\r\n","import { StatusInfo, DataOutputType, Result } from './wps_2.0';\r\n\r\n\r\nexport const isStatusInfo = (obj: object): obj is StatusInfo => {\r\n    return obj.hasOwnProperty('jobID')\r\n       && obj.hasOwnProperty('status');\r\n};\r\n\r\nexport const isDataOutputType = (obj: object): obj is DataOutputType => {\r\n    return obj.hasOwnProperty('id') &&\r\n        (obj.hasOwnProperty('data') || obj.hasOwnProperty('reference') || obj.hasOwnProperty('output'));\r\n};\r\n\r\nexport const isResult = (obj: object): obj is Result => {\r\n    return (obj.hasOwnProperty('output') && typeof obj['output'] === 'object');\r\n};\r\n","import { WpsMarshaller, WpsInput, WpsOutputDescription, WpsResult, WpsCapability, WpsDataDescription, WpsData, WpsState } from '../wps_datatypes';\r\nimport { WPSCapabilitiesType, ExecuteRequestType, DataInputType, OutputDefinitionType, IWpsExecuteProcessBody, IWpsExecuteResponse, DataOutputType, IGetStatusRequest, Data, IGetResultRequest, IDismissRequest, IDismissResponse } from './wps_2.0';\r\nimport { isDataOutputType, isStatusInfo, isResult } from './helpers';\r\n\r\n\r\nexport class WpsMarshaller200 implements WpsMarshaller {\r\n\r\n    constructor() {}\r\n\r\n    getCapabilitiesUrl(baseurl: string): string {\r\n        return `${baseurl}?service=WPS&request=GetCapabilities&version=2.0.0`;\r\n    }\r\n\r\n    executeUrl(baseurl: string, processId: string): string {\r\n        return `${baseurl}?service=WPS&request=Execute&version=2.0.0&identifier=${processId}`;\r\n    }\r\n\r\n    unmarshalCapabilities(capabilities: WPSCapabilitiesType): WpsCapability[] {\r\n        const out: WpsCapability[] = [];\r\n        capabilities.contents.processSummary.forEach(summary => {\r\n            out.push({\r\n                id: summary.identifier.value\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    unmarshalSyncExecuteResponse(responseJson: IWpsExecuteResponse, url: string, processId: string,\r\n        inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[] {\r\n        const out: WpsResult[] = [];\r\n\r\n        if (isResult(responseJson.value)) {\r\n            for (const output of responseJson.value.output) {\r\n                const outputDescription = outputDescriptions.find(od => od.id === output.id);\r\n                if (!outputDescription) {\r\n                    throw new Error(`Could not find an output-description for the parameter ${output.id}.`);\r\n                }\r\n\r\n                const isReference = outputDescription.reference;\r\n                const datatype = outputDescription.type;\r\n                const format = outputDescription.format;\r\n                let data;\r\n                if (output.reference) {\r\n                    data = output.reference.href || null;\r\n                } else if (output.data) {\r\n                    data = this.unmarshalOutputData(output.data, outputDescription);\r\n                } else {\r\n                    throw new Error(`Output has neither reference nor data field.`);\r\n                }\r\n\r\n                out.push({\r\n                    description: {\r\n                        id: output.id,\r\n                        format: format,\r\n                        reference: isReference,\r\n                        type: datatype\r\n                    },\r\n                    value: data,\r\n                });\r\n            }\r\n        } else if (isStatusInfo(responseJson.value)) {\r\n            const state: WpsState = {\r\n                status: responseJson.value.status,\r\n                jobID: responseJson.value.jobID,\r\n                percentCompleted: responseJson.value.percentCompleted\r\n            };\r\n\r\n            out.push({\r\n                description: {\r\n                    id: processId,\r\n                    reference: true,\r\n                    type: 'status'\r\n                },\r\n                value: state\r\n            });\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    protected unmarshalOutputData(data: Data, description: WpsOutputDescription): any {\r\n        if (description.type === 'complex') {\r\n            switch (data.mimeType) {\r\n                case 'application/vnd.geo+json':\r\n                case 'application/json':\r\n                    return data.content.map((cont: any) => JSON.parse(cont));\r\n                case 'application/WMS':\r\n                    return data.content;\r\n                case 'text/xml':\r\n                    return new XMLSerializer().serializeToString(data.content[0]); // @TODO: better: handle actual xml-data\r\n                default:\r\n                    throw new Error(`Cannot unmarshal complex data of format ${data.mimeType}`);\r\n            }\r\n        } else if (description.type === 'literal') {\r\n            return data.content;\r\n        }\r\n\r\n        throw new Error(`Not yet implemented: ${data}`);\r\n    }\r\n\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        return this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions);\r\n    }\r\n\r\n    unmarshalGetStateResponse(responseJson: any, serverUrl: string, processId: string,\r\n        inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        if (isStatusInfo(responseJson.value)) {\r\n            const state: WpsState = {\r\n                status: responseJson.value.status,\r\n                jobID: responseJson.value.jobID,\r\n                percentCompleted: responseJson.value.percentCompleted\r\n            };\r\n            return state;\r\n        } else {\r\n            throw new Error(`Not a status-info: ${responseJson}`);\r\n        }\r\n    }\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean) {\r\n        const inputsMarshalled = this.marshalInputs(inputs);\r\n        const outputsMarshalled = this.marshalOutputs(outputs);\r\n\r\n        const bodyValue: ExecuteRequestType = {\r\n            TYPE_NAME: 'WPS_2_0.ExecuteRequestType',\r\n            service: 'WPS',\r\n            version: '2.0.0',\r\n            identifier: { value: processId },\r\n            input: inputsMarshalled,\r\n            output: outputsMarshalled,\r\n            mode: async ? 'async' : 'sync',\r\n            response: 'document'\r\n        };\r\n\r\n        const body: IWpsExecuteProcessBody = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}Execute',\r\n                localPart: 'Execute',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:Execute'\r\n            },\r\n            value: bodyValue\r\n        };\r\n\r\n        return body;\r\n    }\r\n\r\n    private marshalInputs(inputs: WpsData[]): DataInputType[] {\r\n        return inputs.map(i => {\r\n            if (i.description.reference) {\r\n                return {\r\n                    id: i.description.id,\r\n                    reference: {\r\n                        href: i.value,\r\n                        mimeType: i.description.format,\r\n                    }\r\n                };\r\n            } else {\r\n                return {\r\n                    id: i.description.id,\r\n                    data: {\r\n                        content: [JSON.stringify(i.value)],\r\n                        mimeType: i.description.format\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    private marshalOutputs(outputs: WpsDataDescription[]): OutputDefinitionType[] {\r\n        return outputs.map(o => {\r\n            return {\r\n                id: o.id,\r\n                mimeType: o.format,\r\n                transmission: o.reference ? 'reference' : 'value'  // @TODO: maybe just comment out this line?\r\n            };\r\n        });\r\n    }\r\n\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string) {\r\n        const request: IGetStatusRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}GetStatus',\r\n                localPart: 'GetStatus',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:GetStatus'\r\n             },\r\n             value: {\r\n                 jobID: statusId,\r\n                 service: 'WPS',\r\n                 version: '2.0.0'\r\n             }\r\n        };\r\n        return request;\r\n    }\r\n\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string) {\r\n        const request: IGetResultRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}GetResult',\r\n                localPart: 'GetResult',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:GetResult'\r\n            },\r\n            value: {\r\n                service: 'WPS',\r\n                version: '2.0.0',\r\n                jobID: jobID\r\n            }\r\n        };\r\n        return request;\r\n    }\r\n\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string {\r\n        return serverUrl;\r\n    }\r\n\r\n    marshalDismissBody(jobId: string) {\r\n        const body: IDismissRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}Dismiss',\r\n                localPart: 'Dismiss',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:Dismiss'\r\n             },\r\n             value: {\r\n                 jobID: jobId,\r\n                 service: 'WPS',\r\n                 version: '2.0.0'\r\n             }\r\n        };\r\n        return body;\r\n    }\r\n\r\n    unmarshalDismissResponse(jsonResponse: IDismissResponse, serverUrl: string, processId: string): WpsState {\r\n        const state: WpsState = {\r\n            status: jsonResponse.value.status,\r\n            jobID: jsonResponse.value.jobID\r\n        };\r\n        return state;\r\n    }\r\n}\r\n","import { Observable, timer, of, forkJoin } from 'rxjs';\r\nimport { tap, map, mergeMap, retryWhen, delay } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\nexport function pollUntil<T>(\r\n    task$: Observable<T>, predicate: (results: any) => boolean, doWhile?: (t: T | null) => any, minWaitTime: number = 1000): Observable<T> {\r\n\r\n    if (doWhile) {\r\n        doWhile(null);\r\n    }\r\n\r\n    const tappedTask$: Observable<T> = task$.pipe(\r\n        tap((r: any) => {\r\n            if (doWhile) {\r\n                doWhile(r);\r\n            }\r\n        })\r\n    );\r\n\r\n    const requestTakesAtLeast$: Observable<T> = forkJoin(tappedTask$, timer(minWaitTime)).pipe(\r\n        map(r => r[0])\r\n    );\r\n\r\n    const polledRequest$: Observable<T> = requestTakesAtLeast$.pipe(\r\n        mergeMap((response: any) => {\r\n            if (predicate(response)) {\r\n                // console.log(`obtained correct answer ${response}`);\r\n                return of(response);\r\n            } else {\r\n                // console.log(`obtained false answer ${response}. trying again...`);\r\n                return polledRequest$;\r\n            }\r\n        })\r\n    );\r\n\r\n    return polledRequest$;\r\n}\r\n\r\n\r\nexport function delayedRetry(delayMs: number, maxRetries = 3) {\r\n    let attempts = 1;\r\n\r\n    return (src$: Observable<any>) => {\r\n        return src$.pipe(\r\n            // If an error occurs ...\r\n            retryWhen((error$: Observable<any>) => {\r\n                return error$.pipe(\r\n                    delay(delayMs), // <- in any case, first wait a little while ...\r\n                    mergeMap((error: any) => {\r\n                        if (error.status && error.status === 400) {\r\n                            // In case of a server error, repeating won't help.\r\n                            throw error;\r\n                        } else if (attempts <= maxRetries) {\r\n                            console.log('http-error. Retrying ...');\r\n                            attempts += 1;\r\n                            return of(error); // <- an observable causes request to be retried\r\n                        } else {\r\n                            console.log(`Persistent http-errors after ${attempts} attempts. Giving up.`);\r\n                            throw error; // an error causes request to be given up on.\r\n                        }\r\n                    })\r\n                );\r\n            })\r\n        );\r\n    };\r\n\r\n}\r\n","import { WpsData } from \"./wps_datatypes\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n\r\nexport interface Cache {\r\n    set(input: object, output: WpsData[]);\r\n    get(input: object): Observable<WpsData[] | null>;\r\n}\r\n\r\nexport class FakeCache implements Cache {\r\n    set(input: object, output: WpsData[]) {\r\n    }\r\n\r\n    get(input: object): Observable<WpsData[] | null> {\r\n        return of(null);\r\n    }\r\n}\r\n","import { WpsMarshaller, WpsInput, WpsVerion, WpsResult, WpsOutputDescription, WpsData, WpsState, isWpsState, WpsDataDescription } from './wps_datatypes';\r\nimport { WpsMarshaller100 } from './wps100/wps_marshaller_1.0.0';\r\nimport { WpsMarshaller200 } from './wps200/wps_marshaller_2.0.0';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, tap, share, mergeMap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as XLink_1_0_Factory from 'w3c-schemas/lib/XLink_1_0'; const XLink_1_0 = XLink_1_0_Factory.XLink_1_0;\r\nimport * as OWS_1_1_0_Factory from 'ogc-schemas/lib/OWS_1_1_0'; const OWS_1_1_0 = OWS_1_1_0_Factory.OWS_1_1_0;\r\nimport * as OWS_2_0_Factory from 'ogc-schemas/lib/OWS_2_0'; const OWS_2_0 = OWS_2_0_Factory.OWS_2_0;\r\nimport * as WPS_1_0_0_Factory from 'ogc-schemas/lib/WPS_1_0_0'; const WPS_1_0_0 = WPS_1_0_0_Factory.WPS_1_0_0;\r\nimport * as WPS_2_0_Factory from 'ogc-schemas/lib/WPS_2_0'; const WPS_2_0 = WPS_2_0_Factory.WPS_2_0;\r\nimport { pollUntil, delayedRetry } from './utils/polling';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { Jsonix } from '@boundlessgeo/jsonix';\r\nimport { Cache, FakeCache } from './cache';\r\n\r\n\r\n\r\n/**\r\n * The Wps-client abstracts away the differences between Wps1.0.0 and Wps2.0.0\r\n * There are two layers of marshalling:\r\n *  - the Wps-marshaller marshals user-facing data to wps-specific types\r\n *  - Jsonix marshals wps-specific data to xml.\r\n * user-facing data -> wpsmarshaller -> Wps-type-specific data -> Jsonix-marhsaller -> XML ->\r\n * -> webclient -> WPS -> XML -> Jsonix-unmarshaller -> Wps-type-specific data -> wpsmarshaller -> user-facing data\r\n */\r\n@Injectable()\r\nexport class WpsClient {\r\n\r\n    private version: WpsVerion;\r\n    private xmlmarshaller: any;\r\n    private xmlunmarshaller: any;\r\n    private wpsmarshaller: WpsMarshaller;\r\n    private cache: Cache = new FakeCache();\r\n\r\n    constructor(\r\n        @Inject('WpsVersion') version: WpsVerion = '1.0.0',\r\n        private webclient: HttpClient,\r\n        @Inject('WpsCache') cache?: Cache\r\n    ) {\r\n        this.version = version;\r\n        if (cache) this.cache = cache;\r\n        let context;\r\n        if (this.version === '1.0.0') {\r\n            this.wpsmarshaller = new WpsMarshaller100();\r\n            context = new Jsonix.Context([XLink_1_0, OWS_1_1_0, WPS_1_0_0]);\r\n        } else if (this.version === '2.0.0') {\r\n            this.wpsmarshaller = new WpsMarshaller200();\r\n            context = new Jsonix.Context([XLink_1_0, OWS_2_0, WPS_2_0]);\r\n        } else {\r\n            throw new Error('You entered a WPS version other than 1.0.0 or 2.0.0.');\r\n        }\r\n        this.xmlunmarshaller = context.createUnmarshaller();\r\n        this.xmlmarshaller = context.createMarshaller();\r\n    }\r\n\r\n\r\n    getCapabilities(url: string): Observable<any> {\r\n        const getCapabilitiesUrl = this.wpsmarshaller.getCapabilitiesUrl(url);\r\n        return this.getRaw(getCapabilitiesUrl).pipe(\r\n            map((response: any) => {\r\n                const responseJson = this.xmlunmarshaller.unmarshalString(response);\r\n                return this.wpsmarshaller.unmarshalCapabilities(responseJson.value);\r\n            }) // @TODO: handle case when instead of WpsCapabilites an ExceptionReport is returned\r\n        );\r\n    }\r\n\r\n\r\n    describeProcess(processId: string): Observable<any> {\r\n        throw new Error('Not implemented yet');\r\n    }\r\n\r\n\r\n    executeAsync(url: string, processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[],\r\n        pollingRate: number = 1000, tapFunction?: (response: WpsState | null) => any): Observable<WpsResult[]> {\r\n\r\n        const executeRequest$: Observable<WpsState> = this.executeAsyncS(url, processId, inputs, outputs);\r\n\r\n        const query$ = executeRequest$.pipe(\r\n\r\n            // poll until suceeded\r\n            mergeMap((currentState: WpsState) => {\r\n                const nextState$: Observable<WpsState> = this.getNextState(currentState, url, processId, inputs, outputs);\r\n\r\n                const poll$: Observable<WpsState> = pollUntil<WpsState>(\r\n                    nextState$,\r\n                    (response: WpsState) => {\r\n                        return response.status === 'Succeeded';\r\n                    },\r\n                    tapFunction,\r\n                    pollingRate\r\n                );\r\n\r\n                return poll$;\r\n            }),\r\n\r\n            // fetch results\r\n            mergeMap((lastState: WpsState) => {\r\n                return this.fetchResults(lastState, url, processId, inputs, outputs);\r\n            }),\r\n\r\n            // In case of errors:\r\n            tap((response: WpsData[]) => {\r\n                for (const result of response) {\r\n                    if (result.description.type === 'error') {\r\n                        console.log('server responded with 200, but body contained an error-result: ', result);\r\n                        throw new Error(result.value);\r\n                    }\r\n                }\r\n            })\r\n        );\r\n\r\n        return this.cachedQuery(url, processId, inputs, outputs, query$);\r\n    }\r\n\r\n    private cachedQuery(url: string, processId: string, inputs: WpsInput[],\r\n        outputs: WpsOutputDescription[], query$: Observable<WpsData[]>): Observable<WpsData[]> {\r\n\r\n        const cachedResponse$: Observable<WpsResult[] | null> = this.cache.get({url, processId, inputs, outputs});\r\n        return cachedResponse$.pipe(\r\n            switchMap((results) => {\r\n                if (results) {\r\n                    return of(results);\r\n                } else {\r\n                    return query$.pipe(\r\n                        tap((response: WpsData[]) => {\r\n                            this.cache.set({url, processId, inputs, outputs}, response);\r\n                        })\r\n                    );\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private getNextState(currentState: WpsState, serverUrl: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsState> {\r\n\r\n        let request$: Observable<string>;\r\n        if (this.version === '1.0.0') {\r\n\r\n            if (!currentState.statusLocation) {\r\n                throw Error('No status location');\r\n            }\r\n            request$ = this.getRaw(currentState.statusLocation);\r\n\r\n        } else if (this.version === '2.0.0') {\r\n\r\n            if (!currentState.jobID) {\r\n                throw Error('No job-Id');\r\n            }\r\n            const execbody = this.wpsmarshaller.marshallGetStatusBody(serverUrl, processId, currentState.jobID);\r\n            const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n            request$ = this.postRaw(serverUrl, xmlExecbody);\r\n\r\n        } else {\r\n            throw new Error(`'GetStatus' has not yet been implemented for this WPS-Version (${this.version}).`);\r\n        }\r\n\r\n        const request1$: Observable<WpsState> = request$.pipe(\r\n            delayedRetry(2000, 2),\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsData[] | WpsState =\r\n                    this.wpsmarshaller.unmarshalGetStateResponse(jsonResponse, serverUrl, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n\r\n        return request1$;\r\n    }\r\n\r\n    private fetchResults(lastState: WpsState, serverUrl: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsData[]> {\r\n\r\n        if (lastState.results) { // WPS 1.0: results should already be in last state\r\n            return of(lastState.results);\r\n        } else { // WPS 2.0: get results with post request\r\n\r\n            if (!lastState.jobID) {\r\n                throw new Error(`You want me to get a result, but I can't find a jobId. I don't know what to do now!`);\r\n            }\r\n\r\n            const execBody = this.wpsmarshaller.marshallGetResultBody(serverUrl, processId, lastState.jobID);\r\n            const xmlExecBody = this.xmlmarshaller.marshalString(execBody);\r\n\r\n            return this.postRaw(serverUrl, xmlExecBody).pipe(\r\n                map((xmlResponse: string) => {\r\n                    const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                    const output = this.wpsmarshaller.unmarshalSyncExecuteResponse(jsonResponse, serverUrl, processId, inputs, outputDescriptions);\r\n                    return output;\r\n                }),\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    private executeAsyncS(url: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsState> {\r\n\r\n        const executeUrl = this.wpsmarshaller.executeUrl(url, processId);\r\n        const execbody = this.wpsmarshaller.marshalExecBody(processId, inputs, outputDescriptions, true);\r\n        const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n        return this.postRaw(executeUrl, xmlExecbody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsState =\r\n                    this.wpsmarshaller.unmarshalAsyncExecuteResponse(jsonResponse, url, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    execute(url: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsResult[]> {\r\n\r\n        const executeUrl = this.wpsmarshaller.executeUrl(url, processId);\r\n        const execbody = this.wpsmarshaller.marshalExecBody(processId, inputs, outputDescriptions, false);\r\n        const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n        return this.postRaw(executeUrl, xmlExecbody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsData[] =\r\n                    this.wpsmarshaller.unmarshalSyncExecuteResponse(jsonResponse, url, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    dismiss(serverUrl: string, processId: string, jobId: string): Observable<any> {\r\n\r\n        const dismissUrl = this.wpsmarshaller.dismissUrl(serverUrl, processId, jobId);\r\n        const dismissBody = this.wpsmarshaller.marshalDismissBody(jobId);\r\n        const xmlDismissBody = this.xmlmarshaller.marshalString(dismissBody);\r\n\r\n        return this.postRaw(dismissUrl, xmlDismissBody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output = this.wpsmarshaller.unmarshalDismissResponse(jsonResponse, serverUrl, processId);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    postRaw(url: string, xmlBody: string): Observable<string> {\r\n        const headers = {\r\n            'Content-Type': 'text/xml',\r\n            'Accept': 'text/xml, application/xml'\r\n        };\r\n        return this.webclient.post(url, xmlBody, { headers, responseType: 'text' }).pipe(\r\n            delayedRetry(2000, 2),\r\n            share()  // turning hot: to make sure that multiple subscribers dont cause multiple requests\r\n        );\r\n    }\r\n\r\n    getRaw(url: string): Observable<string> {\r\n        const headers = {\r\n            'Accept': 'text/xml, application/xml'\r\n        };\r\n        return this.webclient.get(url, { headers, responseType: 'text' }).pipe(\r\n            delayedRetry(2000, 2)\r\n        );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OwcJsonService } from './owc/owc-json.service';\r\nimport { WmtsClientService } from './wmts/wmtsclient.service';\r\nimport { WpsClient } from './wps/wpsclient';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: [],\r\n  providers: [OwcJsonService, WmtsClientService, WpsClient]\r\n})\r\nexport class ServicesOgcModule { }\r\n","export type WpsVerion = '1.0.0' | '2.0.0';\r\nexport type WpsDataFormat = 'application/vnd.geo+json' | 'application/json' | 'application/WMS' |\r\n                            'application/xml' | 'text/xml' | 'application/text' | 'image/geotiff' |\r\n                            'text/plain';\r\n\r\n\r\nexport type ProcessId = string;\r\nexport type ProductId = string;\r\n\r\nexport interface WpsDataDescription {\r\n    id: ProductId;\r\n    type: 'literal' | 'complex' | 'bbox' | 'status' | 'error';\r\n    reference: boolean;\r\n    format?: WpsDataFormat;\r\n    description?: string;\r\n    defaultValue?: any;\r\n}\r\nexport type WpsInputDescription = WpsDataDescription;\r\nexport type WpsOutputDescription = WpsDataDescription;\r\n\r\n\r\nexport interface WpsData {\r\n    description: WpsDataDescription;\r\n    value: any;\r\n}\r\nexport type WpsInput = WpsData;\r\nexport type WpsResult = WpsData;\r\n\r\nexport interface WpsBboxDescription {\r\n    id: ProductId;\r\n    type: 'bbox';\r\n    reference: boolean;\r\n    format?: WpsDataFormat;\r\n    description?: string;\r\n    defaultValue?: any;\r\n}\r\n\r\nexport interface WpsBboxValue {\r\n    crs: string;\r\n    lllon: number;\r\n    lllat: number;\r\n    urlon: number;\r\n    urlat: number;\r\n}\r\n\r\nexport const isBbox = (obj: object): obj is WpsBboxValue => {\r\n    return (\r\n        obj.hasOwnProperty('crs') &&\r\n        obj.hasOwnProperty('lllon') &&\r\n        obj.hasOwnProperty('lllat') &&\r\n        obj.hasOwnProperty('urlon') &&\r\n        obj.hasOwnProperty('urlat')\r\n    );\r\n};\r\n\r\n\r\nexport interface WpsState {\r\n    status: 'Succeeded' | 'Failed' | 'Accepted' | 'Running' | 'Dismissed';\r\n    percentCompleted?: number;\r\n    /** WPS 2.0 only */\r\n    jobID?: string;\r\n    /** WPS 1.0 only */\r\n    statusLocation?: string;\r\n    /** WPS 1.0 only: a success-state already contains the results */\r\n    results?: WpsData[];\r\n}\r\n\r\nexport function isWpsState(obj: object): obj is WpsState {\r\n    return obj && obj.hasOwnProperty('status') && (obj.hasOwnProperty('jobID') || obj.hasOwnProperty('statusLocation'));\r\n}\r\n\r\n\r\nexport interface WpsBboxData {\r\n    description: WpsBboxDescription;\r\n    value: WpsBboxValue;\r\n}\r\n\r\nexport interface WpsCapability {\r\n    id: string;\r\n}\r\n\r\n\r\nexport interface WpsMarshaller {\r\n\r\n    executeUrl(url: string, processId: string): string;\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string;\r\n    getCapabilitiesUrl(baseurl: string): string;\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean): any;\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string): any;\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string): any;\r\n    marshalDismissBody(jobId: string): any;\r\n\r\n    unmarshalCapabilities(capabilitiesJson: any): WpsCapability[];\r\n    unmarshalSyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[];\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsState;\r\n    unmarshalGetStateResponse(jsonResponse: any, serverUrl: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsState;\r\n    unmarshalDismissResponse(jsonResponse: any, serverUrl: string, processId: string): WpsState;\r\n}\r\n"]}