{"version":3,"file":"ukis-services-ogc.js","sources":["ng://@ukis/services-ogc/lib/wmts/wmtsclient.service.ts","ng://@ukis/services-ogc/lib/owc/owc-json.service.ts","ng://@ukis/services-ogc/lib/wps/wps100/wps_marshaller_1.0.0.ts","ng://@ukis/services-ogc/lib/wps/wps200/helpers.ts","ng://@ukis/services-ogc/lib/wps/wps200/wps_marshaller_2.0.0.ts","ng://@ukis/services-ogc/lib/wps/utils/polling.ts","ng://@ukis/services-ogc/lib/wps/cache.ts","ng://@ukis/services-ogc/lib/wps/wpsclient.ts","ng://@ukis/services-ogc/lib/services-ogc.module.ts","ng://@ukis/services-ogc/lib/owc/types/owc-json.ts","ng://@ukis/services-ogc/lib/owc/types/eoc-owc-json.ts","ng://@ukis/services-ogc/lib/wps/wps_datatypes.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Jsonix } from '@boundlessgeo/jsonix';\r\nimport { map } from 'rxjs/operators';\r\nimport * as XLink_1_0_Factory from 'w3c-schemas/lib/XLink_1_0';\r\nconst XLink_1_0 = XLink_1_0_Factory.XLink_1_0;\r\nimport * as OWS_1_1_0_Factory from 'ogc-schemas/lib/OWS_1_1_0';\r\nconst OWS_1_1_0 = OWS_1_1_0_Factory.OWS_1_1_0;\r\nimport * as SMIL_2_0_Factory from 'ogc-schemas/lib/SMIL_2_0';\r\nconst SMIL_2_0 = SMIL_2_0_Factory.SMIL_2_0;\r\nimport * as SMIL_2_0_Language_Factory from 'ogc-schemas/lib/SMIL_2_0_Language';\r\nconst SMIL_2_0_Language = SMIL_2_0_Language_Factory.SMIL_2_0_Language;\r\nimport * as GML_3_1_1_Factory from 'ogc-schemas/lib/GML_3_1_1';\r\nconst GML_3_1_1 = GML_3_1_1_Factory.GML_3_1_1;\r\nimport * as WMTS_1_0_Factory from 'ogc-schemas/lib/WMTS_1_0';\r\nconst WMTS_1_0 = WMTS_1_0_Factory.WMTS_1_0;\r\n\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WmtsClientService {\r\n\r\n    private xmlmarshaller;\r\n    private xmlunmarshaller;\r\n\r\n    constructor(private http: HttpClient) {\r\n        const context = new Jsonix.Context([SMIL_2_0, SMIL_2_0_Language, GML_3_1_1, XLink_1_0, OWS_1_1_0, WMTS_1_0]);\r\n        this.xmlunmarshaller = context.createUnmarshaller();\r\n        this.xmlmarshaller = context.createMarshaller();\r\n    }\r\n\r\n    public getCapabilities (url: string, version = '1.1.0'): Observable<object> {\r\n        // example: https://tiles.geoservice.dlr.de/service/wmts?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=1.1.0\r\n        const getCapabilitiesUrl = `${url}?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=${version}`;\r\n        const headers = new HttpHeaders({\r\n            'Content-Type': 'text/xml',\r\n            'Accept': 'text/xml, application/xml'\r\n        });\r\n        return this.http.get(getCapabilitiesUrl, { headers, responseType: 'text' }).pipe(\r\n            map(response => {\r\n                return this.xmlunmarshaller.unmarshalString(response);\r\n            })\r\n        );\r\n    }\r\n\r\n}","\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  IOwsContext, IOwsResource, IOwsOffering, IOwsOperation, IOwsContent, WMS_Offering, WFS_Offering, WCS_Offering,\r\n  CSW_Offering, WMTS_Offering, GML_Offering, KML_Offering, GeoTIFF_Offering, GMLJP2_Offering, GMLCOV_Offering\r\n} from './types/owc-json';\r\nimport {\r\n  IEocOwsContext, IEocOwsResource, IEocOwsOffering, GeoJson_Offering, Xyz_Offering, IEocOwsWmtsOffering,\r\n  IEocWmsOffering, IEocOwsResourceDimension, IEocOwsWmtsMatrixSet\r\n} from './types/eoc-owc-json';\r\nimport {\r\n  ILayerGroupOptions, ILayerOptions, IRasterLayerOptions, VectorLayer, RasterLayer, IVectorLayerOptions,\r\n  Layer, TLayertype, WmsLayertype, WmtsLayertype, WfsLayertype, GeojsonLayertype, CustomLayer, CustomLayertype, XyzLayertype,\r\n  TRasterLayertype, isRasterLayertype, isVectorLayertype, TVectorLayertype, ILayerDimensions,\r\n  ILayerIntervalAndPeriod,\r\n  IWmtsParams,\r\n  WmtsLayer,\r\n  IWmtsOptions,\r\n  WmsLayer,\r\n  IWmsParams,\r\n  IWmsOptions,\r\n  IListMatrixSet\r\n} from '@ukis/services-layers';\r\nimport { TGeoExtent } from '@ukis/services-map-state';\r\nimport { WmtsClientService } from '../wmts/wmtsclient.service';\r\nimport { of, Observable, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\nexport function isWmsOffering(str: string): str is WMS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wms'\r\n    || str === 'http://schemas.opengis.net/wms/1.1.1'\r\n    || str === 'http://schemas.opengis.net/wms/1.1.0';\r\n}\r\nexport function isWfsOffering(str: string): str is WFS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wfs';\r\n}\r\nexport function isWpsOffering(str: string): str is WCS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wcs';\r\n}\r\nexport function isCswOffering(str: string): str is CSW_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/csw';\r\n}\r\nexport function isWmtsOffering(str: string): str is WMTS_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/wmts'\r\n    || str === 'http://schemas.opengis.net/wmts/1.0.0'\r\n    || str === 'http://schemas.opengis.net/wmts/1.1.0';\r\n}\r\nexport function isGmlOffering(str: string): str is GML_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gml';\r\n}\r\nexport function isKmlOffering(str: string): str is KML_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/kml';\r\n}\r\nexport function isGeoTIFFOffering(str: string): str is GeoTIFF_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/geotiff';\r\n}\r\nexport function isGMLJP2Offering(str: string): str is GMLJP2_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmljp2';\r\n}\r\nexport function isGMLCOVOffering(str: string): str is GMLCOV_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmlcov';\r\n}\r\nexport function isXyzOffering(str: string): str is Xyz_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/xyz';\r\n}\r\nexport function isGeoJsonOffering(str: string): str is GeoJson_Offering {\r\n  return str === 'http://www.opengis.net/spec/owc-geojson/1.0/req/geojson';\r\n}\r\nexport function shardsExpand(v: string) {\r\n  if (!v) { return; }\r\n  let o = []\r\n  for (let i in v.split(',')) {\r\n    var j = v.split(',')[i].split(\"-\")\r\n    if (j.length == 1) {\r\n      o.push(v.split(',')[i])\r\n    } else if (j.length == 2) {\r\n      let start = j[0].charCodeAt(0)\r\n      let end = j[1].charCodeAt(0)\r\n      if (start <= end) {\r\n        for (let k = start; k <= end; k++) {\r\n          o.push(String.fromCharCode(k).toLowerCase());\r\n        }\r\n      } else {\r\n        for (let k = start; k >= end; k--) {\r\n          o.push(String.fromCharCode(k).toLowerCase());\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return o\r\n}\r\n/**\r\n * OWS Context Service\r\n * OGC OWS Context Geo Encoding Standard Version: 1.0\r\n * http://docs.opengeospatial.org/is/14-055r2/14-055r2.html\r\n * http://www.owscontext.org/owc_user_guide/C0_userGuide.html\r\n *\r\n * This service allows you to read and write OWC-data.\r\n * We have added some custom fields to the OWC standard.\r\n *   - accepts the OWC-standard-datatypes as function inputs (so as to be as general as possible)\r\n *   - returns our extended OWC-datatypes as function outputs (so as to be as information-rich as possible)\r\n *\r\n */\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OwcJsonService {\r\n\r\n  constructor(private wmtsClient: WmtsClientService) {\r\n    //http://www.owscontext.org/owc_user_guide/C0_userGuide.html#truegeojson-encoding-2\r\n  }\r\n\r\n\r\n  checkContext(context: IOwsContext) {\r\n    let isContext_1_0;\r\n    if (!Array.isArray(context.properties.links)) {\r\n      isContext_1_0 = context.properties.links.profiles.find(item => item === 'http://www.opengis.net/spec/owc-geojson/1.0/req/core');\r\n    } else {\r\n      isContext_1_0 = context.properties.links.find(item => item.href === 'http://www.opengis.net/spec/owc-geojson/1.0/req/core');\r\n    }\r\n\r\n    if (!isContext_1_0) {\r\n      console.error('this is not a valid OWS Context v1.0!');\r\n\r\n    }\r\n    return isContext_1_0;\r\n  }\r\n\r\n  getContextTitle(context: IOwsContext) {\r\n    return context.properties.title;\r\n  }\r\n\r\n  getContextPublisher(context: IOwsContext) {\r\n    return (context.properties.publisher) ? context.properties.publisher : null;\r\n  }\r\n\r\n  getContextExtent(context: IOwsContext) {\r\n    return (context.bbox) ? context.bbox : null; // or [-180, -90, 180, 90];\r\n  }\r\n\r\n\r\n  getResources(context: IOwsContext) {\r\n    return context.features;\r\n  }\r\n\r\n  /** Resource --------------------------------------------------- */\r\n  getResourceTitle(resource: IOwsResource) {\r\n    return resource.properties.title;\r\n  }\r\n\r\n  getResourceUpdated(resource: IOwsResource) {\r\n    return resource.properties.updated;\r\n  }\r\n\r\n  getResourceDate(resource: IOwsResource) {\r\n    return (resource.properties.date) ? resource.properties.date : null;\r\n  }\r\n\r\n  getResourceOfferings(resource: IOwsResource) {\r\n    return (resource.properties.offerings) ? resource.properties.offerings : null;\r\n  }\r\n\r\n  /**\r\n   * retrieve layer status active / inactive based on IOwsResource\r\n   * @param resource: IOwsResource\r\n   */\r\n  isActive(resource: IOwsResource) {\r\n    let active = true;\r\n    if (resource.properties.hasOwnProperty('active')) {\r\n      active = resource.properties.active;\r\n    }\r\n    return active;\r\n  }\r\n\r\n  getResourceOpacity(resource: IOwsResource): number {\r\n    let opacity = 1;\r\n    if (resource.properties.hasOwnProperty('opacity')) {\r\n      opacity = resource.properties.opacity;\r\n    }\r\n    return opacity;\r\n  }\r\n\r\n  getResourceAttribution(resource: IOwsResource): string {\r\n    let attribution = '';\r\n    if (resource.properties.hasOwnProperty('attribution')) {\r\n      attribution = resource.properties.attribution;\r\n    }\r\n    return attribution;\r\n  }\r\n\r\n  getResourceShards(resource: IOwsResource): string {\r\n    if (resource.properties.hasOwnProperty('shards')) {\r\n      return resource.properties.shards;\r\n    }\r\n  }\r\n\r\n  convertOwcTimeToIsoTimeAndPeriodicity(owctime: string): ILayerIntervalAndPeriod | string {\r\n    /**\r\n     Convert from\r\n    */\r\n    let arr = owctime.split('/');\r\n    let t = (arr.length == 3) ? arr[0] + '/' + arr[1] : owctime;\r\n    let p = (arr.length == 3) ? arr[2] : null;\r\n    if (p) {\r\n      return { \"interval\": t, \"periodicity\": p };\r\n    }\r\n    else {\r\n      return t\r\n    }\r\n  }\r\n\r\n  getResourceDimensions(resource: IOwsResource): ILayerDimensions {\r\n    if (!resource.properties.hasOwnProperty('dimensions')) {\r\n      return undefined;\r\n    }\r\n    let dims = {}\r\n\r\n    let dimensions = {}\r\n    if (Array.isArray(resource.properties.dimensions)) {\r\n      for (let d of resource.properties.dimensions) {\r\n        dimensions[d.name] = d\r\n      }\r\n    } else {\r\n      dimensions = resource.properties.dimensions\r\n    }\r\n    for (let name in dimensions) {\r\n      let dim = {}\r\n      console.log(name)\r\n      if (name === \"time\" || dimensions[name].units == \"ISO8601\") {\r\n        let value = dimensions[name].value\r\n        let values = (value) ? value.split(',').map((v: string) => this.convertOwcTimeToIsoTimeAndPeriodicity(v)) : null\r\n        dim = {\r\n          \"values\": ((!values) || values.length > 1) ? values : values[0],\r\n          \"units\": dimensions[name].units,\r\n          \"display\": {\r\n            \"format\": \"YYYMMDD\",\r\n            \"period\": dimensions[name].display,\r\n            \"default\": \"end\"\r\n          }\r\n        }\r\n      }\r\n      else if (name === \"elevation\") {\r\n        dim = dimensions[name];\r\n      }\r\n      else {\r\n        dim = dimensions[name];\r\n      }\r\n      dims[name] = dim;\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  /** Offering --------------------------------------------------- */\r\n  getLayertypeFromOfferingCode(offering: IOwsOffering): TLayertype {\r\n    if (isWmsOffering(offering.code)) {\r\n      return WmsLayertype;\r\n    } else if (isWmtsOffering(offering.code)) {\r\n      return WmtsLayertype;\r\n    } else if (isWfsOffering(offering.code)) {\r\n      return WfsLayertype;\r\n    } else if (isGeoJsonOffering(offering.code)) {\r\n      return GeojsonLayertype;\r\n    } else if (isXyzOffering(offering.code)) {\r\n      return XyzLayertype;\r\n    } else {\r\n      return offering.code; // an offering can also be any other string.\r\n    }\r\n  }\r\n\r\n  checkIfServiceOffering(offering: IOwsOffering): boolean {\r\n    return (!offering.contents && offering.operations) ? true : false;\r\n  }\r\n\r\n  checkIfDataOffering(offering: IOwsOffering): boolean {\r\n    return (offering.contents && !offering.operations) ? true : false;\r\n  }\r\n\r\n  getOfferingContents(offering: IOwsOffering): IOwsOperation[] | IOwsContent[] {\r\n    if (this.checkIfServiceOffering(offering)) {\r\n      return offering.operations;\r\n    } else if (this.checkIfDataOffering(offering)) {\r\n      return offering.contents;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function to extract legendURL from project specific ows Context\r\n   * @param offering layer offering\r\n   */\r\n  getLegendUrl(offering: IOwsOffering) {\r\n    let legendUrl = '';\r\n\r\n    if (offering.hasOwnProperty('styles')) {\r\n      let defaultStyle = offering.styles.filter(style => style.default);\r\n      if (defaultStyle.length > 0) {\r\n        return defaultStyle[0].legendURL;\r\n      }\r\n    } else if (offering.hasOwnProperty('legendUrl')) {\r\n      legendUrl = offering.legendUrl;\r\n    }\r\n    return legendUrl;\r\n  }\r\n\r\n  /**\r\n   * retrieve iconUrl based on IOwsOffering\r\n   * @param offering\r\n   */\r\n  getIconUrl(offering: IOwsOffering) {\r\n    let iconUrl = '';\r\n    if (offering.hasOwnProperty('iconUrl')) {\r\n      iconUrl = offering.iconUrl;\r\n    }\r\n    return iconUrl;\r\n  }\r\n\r\n  /**\r\n   * layer priority: first wms, then wmts, then wfs, then others.\r\n   */\r\n  public getLayers(owc: IOwsContext, targetProjection: string): Observable<Layer[]> {\r\n    const resources = owc.features;\r\n    const layers$: Observable<Layer>[] = [];\r\n\r\n    for (const resource of resources) {\r\n      const offerings = resource.properties.offerings;\r\n      if (offerings.length > 0) {\r\n        const offering = offerings.find(o => isWmsOffering(o.code))\r\n          || offerings.find(o => isWmtsOffering(o.code))\r\n          || offerings.find(o => isWfsOffering(o.code))\r\n          || offerings[0];\r\n        layers$.push(this.createLayerFromOffering(offering, resource, owc, targetProjection));\r\n      }\r\n    }\r\n\r\n    return forkJoin(layers$);\r\n  }\r\n\r\n  createLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<Layer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n    if (isRasterLayertype(layerType)) {\r\n      return this.createRasterLayerFromOffering(offering, resource, context, targetProjection);\r\n    } else if (isVectorLayertype(layerType)) {\r\n      return this.createVectorLayerFromOffering(offering, resource, context);\r\n    } else {\r\n      console.error(`This type of service (${layerType}) has not been implemented yet.`);\r\n    }\r\n  }\r\n\r\n  createVectorLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context?: IOwsContext): Observable<VectorLayer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n\r\n    if (!isVectorLayertype(layerType)) {\r\n      console.error(`This type of layer '${layerType}' / offering '${offering.code}' cannot be converted into a Vectorlayer`);\r\n      return null;\r\n    }\r\n\r\n    const iconUrl = this.getIconUrl(offering);\r\n\r\n    let layerUrl, params;\r\n    // if we have a operations-offering (vs. a data-offering):\r\n    if (offering.operations) layerUrl = this.getUrlFromUri(offering.operations[0].href);\r\n    if (offering.operations) params = this.getJsonFromUri(offering.operations[0].href);\r\n\r\n    let data;\r\n    // if we have a data-offering: \r\n    if (offering.contents) {\r\n      data = offering.contents[0].content;\r\n    }\r\n\r\n    let legendUrl = this.getLegendUrl(offering);\r\n\r\n    let layerOptions: IVectorLayerOptions = {\r\n      id: resource.id as string,\r\n      name: this.getResourceTitle(resource),\r\n      displayName: this.getDisplayName(offering, resource),\r\n      visible: this.isActive(resource),\r\n      type: layerType,\r\n      removable: true,\r\n      attribution: this.getResourceAttribution(resource),\r\n      continuousWorld: false,\r\n      opacity: this.getResourceOpacity(resource),\r\n      url: layerUrl ? layerUrl : null,\r\n      legendImg: legendUrl ? legendUrl : null,\r\n      data: data\r\n    };\r\n\r\n\r\n    const layer = new VectorLayer(layerOptions);\r\n\r\n    if (resource.bbox) {\r\n      layer.bbox = resource.bbox;\r\n    } else if (context && context.bbox) {\r\n      layer.bbox = context.bbox;\r\n    }\r\n\r\n    return of(layer);\r\n  }\r\n\r\n  createRasterLayerFromOffering(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<RasterLayer> {\r\n    const layerType = this.getLayertypeFromOfferingCode(offering);\r\n\r\n    if (!isRasterLayertype(layerType)) {\r\n      console.error(`This type of offering '${offering.code}' cannot be converted into a rasterlayer.`);\r\n      return null;\r\n    }\r\n\r\n    let rasterLayer$: Observable<RasterLayer>;\r\n    switch (layerType) {\r\n      case WmsLayertype:\r\n        rasterLayer$ = this.createWmsLayerFromOffering(offering, resource, context);\r\n        break;\r\n      case WmtsLayertype:\r\n        rasterLayer$ = this.createWmtsLayerFromOffering(offering, resource, context, targetProjection);\r\n        break;\r\n      case XyzLayertype:\r\n        // @TODO\r\n        break;\r\n      case CustomLayertype:\r\n        // custom layers are meant to be userdefined and not easily encoded in a OWC.\r\n        break;\r\n    }\r\n\r\n    return rasterLayer$;\r\n  }\r\n\r\n  private createWmtsLayerFromOffering(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<WmtsLayer> {\r\n    return this.getWmtsOptions(offering, resource, context, targetProjection).pipe(map((options: IWmtsOptions) => {\r\n      const layer = new WmtsLayer(options);\r\n      return layer;\r\n    }));\r\n  }\r\n\r\n  private createWmsLayerFromOffering(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): Observable<WmsLayer> {\r\n    const options: IWmsOptions = this.getWmsOptions(offering, resource, context);\r\n    const layer = new WmsLayer(options);\r\n    return of(layer);\r\n  }\r\n\r\n  private getWmtsOptions(\r\n    offering: IOwsOffering, resource: IOwsResource, context: IOwsContext, targetProjection: string): Observable<IWmtsOptions> {\r\n    const rasterOptions: IRasterLayerOptions = this.getRasterLayerOptions(offering, resource, context);\r\n\r\n    const layer = this.getLayerForWMTS(offering, resource);\r\n\r\n    let style: string;\r\n    if (offering.styles) {\r\n      const styleInfo = offering.styles.find(s => s.default);\r\n      if (styleInfo) {\r\n        style = styleInfo.name;\r\n      }\r\n    }\r\n\r\n    return this.getMatrixSetForWMTS(offering, resource, targetProjection).pipe(map(((matrixSet: IEocOwsWmtsMatrixSet) => {\r\n      const matrixSetOptions: IListMatrixSet = {\r\n        matrixSet: matrixSet.matrixSet,\r\n        matrixIds: matrixSet.matrixIds,\r\n        resolutions: matrixSet.resolutions\r\n      };\r\n      const wmtsOptions: IWmtsOptions = {\r\n        ...rasterOptions,\r\n        type: 'wmts',\r\n        params: {\r\n          layer: layer,\r\n          matrixSetOptions: matrixSetOptions,\r\n          projection: targetProjection,\r\n          style: style,\r\n          format: 'image/png'\r\n        }\r\n      };\r\n      return wmtsOptions;\r\n    })));\r\n  }\r\n\r\n  private getLayerForWMTS(offering: IOwsOffering, resource: IOwsResource): string {\r\n    const [url, urlParams] = this.parseOperationUrl(offering, 'GetTile');\r\n    if (urlParams['LAYER']) {\r\n      return urlParams['LAYER'];\r\n    } else {\r\n      console.error(`There is no layer-parameter in the offering ${offering.code} for resource ${resource.id}.\r\n      Cannot infer layer.`, offering);\r\n    }\r\n  }\r\n\r\n  private parseOperationUrl(offering: IOwsOffering, opCode: string): [string, object] {\r\n    if (offering.operations) {\r\n      const operation = offering.operations.find(op => op.code === opCode);\r\n      if (operation) {\r\n        const url = this.getUrlFromUri(operation.href);\r\n        const urlParams = this.getJsonFromUri(operation.href);\r\n        return [url, urlParams];\r\n      } else {\r\n        console.error(`There is no ${opCode}-operation in the offering ${offering.code}.`, offering);\r\n      }\r\n    } else {\r\n      console.error(`The offering ${offering.code} has no operations.`, offering);\r\n    }\r\n  }\r\n\r\n  private getMatrixSetForWMTS(offering: IOwsOffering, resource: IOwsResource, targetProjection: string): Observable<IEocOwsWmtsMatrixSet> {\r\n    if (offering.matrixSets) {\r\n      const matrixSet = offering.matrixSets.find(m => m.srs === targetProjection);\r\n      return of(matrixSet);\r\n    } else {\r\n      const [url, urlParams] = this.parseOperationUrl(offering, 'GetCapabilities');\r\n      return this.wmtsClient.getCapabilities(url).pipe(\r\n        map((capabilities: object) => {\r\n          const matrixSets = capabilities['value']['contents']['tileMatrixSet'];\r\n          const matrixSet = matrixSets.find(ms => ms['identifier']['value'] === targetProjection);\r\n          const owsMatrixSet: IEocOwsWmtsMatrixSet = {\r\n            srs: targetProjection,\r\n            matrixSet: matrixSet['identifier']['value'],\r\n            matrixIds: matrixSet['tileMatrix'].map(tm => tm['identifier']['value']),\r\n            resolutions: matrixSet['tileMatrix'].map(tm => tm['scaleDenominator']),\r\n            origin: {\r\n              x: matrixSet['tileMatrix'][0]['topLeftCorner'][1],\r\n              y: matrixSet['tileMatrix'][0]['topLeftCorner'][0]\r\n            },\r\n            tilesize: matrixSet['tileMatrix'][0]['tileHeight']\r\n          };\r\n          return owsMatrixSet;\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private getWmsOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): IWmsOptions {\r\n    const rasterOptions: IRasterLayerOptions = this.getRasterLayerOptions(offering, resource, context);\r\n    if (rasterOptions.type === WmsLayertype) {\r\n\r\n      const urlParams = this.getJsonFromUri(offering.operations[0].href);\r\n      let defaultStyle;\r\n      if (offering.styles) {\r\n        defaultStyle = offering.styles.find(s => s.default).name;\r\n      }\r\n\r\n      const params: IWmsParams = {\r\n        LAYERS: urlParams['LAYERS'],\r\n        FORMAT: urlParams['FORMAT'],\r\n        TIME: urlParams['TIME'],\r\n        VERSION: urlParams['VERSION'],\r\n        TILED: urlParams['TILED'],\r\n        TRANSPARENT: true,\r\n        STYLES: defaultStyle\r\n      };\r\n\r\n      const wmsOptions: IWmsOptions = {\r\n        ...rasterOptions,\r\n        type: 'wms',\r\n        params: params\r\n      };\r\n      return wmsOptions;\r\n    } else {\r\n      console.error(`resource ${resource.id} cannot be converted into a WMS-Layer`, offering);\r\n    }\r\n  }\r\n\r\n  private getRasterLayerOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): IRasterLayerOptions {\r\n    const layerOptions: ILayerOptions = this.getLayerOptions(offering, resource, context);\r\n    if (isRasterLayertype(layerOptions.type)) {\r\n      const rasterLayerOptions: IRasterLayerOptions = {\r\n        ...layerOptions,\r\n        type: layerOptions.type as TRasterLayertype,\r\n        url: this.getUrlFromUri(offering.operations[0].href),\r\n        subdomains: shardsExpand(this.getResourceShards(resource))\r\n      };\r\n      return rasterLayerOptions;\r\n    } else {\r\n      console.error(`The layer ${layerOptions.id} is not a rasterlayer`, layerOptions);\r\n    }\r\n  }\r\n\r\n  private getLayerOptions(offering: IOwsOffering, resource: IOwsResource, context: IOwsContext): ILayerOptions {\r\n    const layerOptions: ILayerOptions = {\r\n      id: resource.id as string,\r\n      type: this.getLayertypeFromOfferingCode(offering),\r\n      name: this.getResourceTitle(resource),\r\n      removable: true,\r\n      continuousWorld: false,\r\n      opacity: this.getResourceOpacity(resource),\r\n      displayName: this.getDisplayName(offering, resource),\r\n      visible: this.isActive(resource),\r\n      attribution: this.getResourceAttribution(resource),\r\n      dimensions: this.getResourceDimensions(resource),\r\n      legendImg: this.getLegendUrl(offering),\r\n      styles: offering.styles\r\n    };\r\n\r\n    if (resource.bbox) {\r\n      layerOptions.bbox = resource.bbox;\r\n    } else if (context && context.bbox) {\r\n      layerOptions.bbox = context.bbox;\r\n    }\r\n\r\n    return layerOptions;\r\n  }\r\n\r\n  /** Misc --------------------------------------------------- */\r\n\r\n  private getUrlFromUri(uri: string) {\r\n    return uri.substring(0, uri.indexOf('?'));\r\n  }\r\n\r\n  /**\r\n   * helper to pack query-parameters of a uri into a JSON\r\n   * @param uri any uri with query-parameters\r\n   */\r\n  private getJsonFromUri(uri: string): object {\r\n    const query = uri.substr(uri.lastIndexOf('?') + 1);\r\n    const result = {};\r\n    query.split('&').forEach(function (part) {\r\n      const item = part.split('=');\r\n      result[item[0].toUpperCase()] = decodeURIComponent(item[1]);\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n  /**\r\n   * retrieve display name of layer, based on IOwsResource and IOwsOffering\r\n   * @param offering\r\n   * @param resource\r\n   */\r\n  private getDisplayName(offering: IOwsOffering, resource: IOwsResource) {\r\n    let displayName = '';\r\n    if (offering.hasOwnProperty('title')) {\r\n      if (offering.title) {\r\n        displayName = offering.title;\r\n      } else {\r\n        displayName = this.getResourceTitle(resource);\r\n      }\r\n    }\r\n    return displayName;\r\n  }\r\n\r\n\r\n  /**------------ DATA TO FILE -----------------------------------------*/\r\n\r\n\r\n  /**\r\n   * @TODO:\r\n   *   - properties\r\n   */\r\n  generateOwsContextFrom(id: string, layers: Layer[], extent?: TGeoExtent, properties?): IEocOwsContext {\r\n\r\n    if (!properties) {\r\n      properties = {\r\n        lang: '',\r\n        links: [],\r\n        title: '',\r\n        updated: ''\r\n      };\r\n    }\r\n\r\n    let owc: IEocOwsContext = {\r\n      'id': id,\r\n      'type': 'FeatureCollection',\r\n      'properties': properties,\r\n      'features': []\r\n    };\r\n\r\n    if (extent) {\r\n      owc['bbox'] = extent;\r\n    }\r\n\r\n    for (let layer of layers) {\r\n      let resource: IEocOwsResource = this.generateResourceFromLayer(layer);\r\n      // TODO check for layer types\r\n      owc.features.push(resource);\r\n    }\r\n\r\n    return owc;\r\n  }\r\n\r\n  generateResourceFromLayer(layer: Layer): IEocOwsResource {\r\n    let resource: IEocOwsResource = {\r\n      'id': layer.id,\r\n      'properties': {\r\n        title: layer.name,\r\n        updated: null,\r\n        offerings: [this.generateOfferingFromLayer(layer)],\r\n        opacity: layer.opacity,\r\n        attribution: layer.attribution,\r\n      },\r\n      'type': 'Feature',\r\n      'geometry': null\r\n    }\r\n    return resource;\r\n  }\r\n\r\n  generateOfferingFromLayer(layer: Layer, legendUrl?: string, iconUrl?: string): IEocOwsOffering {\r\n    let offering: IEocOwsOffering = {\r\n      'code': this.getOfferingCodeFromLayer(layer),\r\n      'title': layer.name\r\n    };\r\n\r\n    if (layer.type == GeojsonLayertype) {\r\n      offering.contents = this.getContentsFromLayer(layer as VectorLayer);\r\n    } else {\r\n      offering.operations = this.getOperationsFromLayer(layer);\r\n    }\r\n\r\n    if (legendUrl) offering.legendUrl = legendUrl;\r\n    if (iconUrl) offering.iconUrl = iconUrl;\r\n\r\n    return offering;\r\n  }\r\n\r\n  getOfferingCodeFromLayer(layer: Layer): string {\r\n    switch (layer.type) {\r\n      case WmsLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/wms';\r\n      case WmtsLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/wmts';\r\n      case GeojsonLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/geojson';\r\n      case XyzLayertype:\r\n        return 'http://www.opengis.net/spec/owc-geojson/1.0/req/xyz';\r\n      default:\r\n        console.error(`This type of layer (${layer.type}) has not been implemented yet.`);\r\n        return null;\r\n    }\r\n  }\r\n\r\n  getContentsFromLayer(layer: VectorLayer): IOwsContent[] {\r\n    let contents = [];\r\n    switch (layer.type) {\r\n      case GeojsonLayertype:\r\n        let content = {\r\n          type: 'FeatureCollection',\r\n          content: JSON.stringify(layer.data)\r\n        };\r\n        contents.push(content);\r\n        break;\r\n      default:\r\n        console.error(`Cannot get contents for this type of vectorlayer: (${layer.type})`);\r\n    }\r\n    return contents;\r\n  }\r\n\r\n  getOperationsFromLayer(layer: Layer): IOwsOperation[] {\r\n    if (layer instanceof RasterLayer) {\r\n      switch (layer.type) {\r\n        case WmsLayertype:\r\n          return this.getWmsOperationsFromLayer(layer);\r\n        case WmtsLayertype:\r\n          return this.getWmtsOperationsFromLayer(layer);\r\n        case XyzLayertype:\r\n          return this.getXyzOperationsFromLayer(layer);\r\n        default:\r\n          console.error(`Cannot get operations for this type of layer: (${layer.type})`);\r\n          return [];\r\n      }\r\n    }\r\n\r\n    else if (layer instanceof VectorLayer) {\r\n      switch (layer.type) {\r\n        // case 'wfs': <--- this type of layer has not been implemented yet in datatypes-layers/Layers.ts \r\n        //   return this.getWfsOperationsFromLayer(layer);\r\n        default:\r\n          console.error(`This type of service (${layer.type}) has not been implemented yet.`);\r\n          return [];\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  getXyzOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n    let restCall: IOwsOperation = {\r\n      'code': 'REST',\r\n      'method': 'GET',\r\n      'type': 'text/html',\r\n      'href': `${layer.url}`\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      restCall\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n  getTmsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n    // @TODO: what operations are defined on TMS? https://wiki.osgeo.org/wiki/Tile_Map_Service_Specification\r\n    return [];\r\n  }\r\n\r\n\r\n  getWfsOperationsFromLayer(layer: VectorLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let layerName = layer.name;\r\n    let version = layer.options.version ? layer.options.version : '1.1.0';\r\n\r\n\r\n    let GetFeature: IOwsOperation = {\r\n      'code': 'GetFeature',\r\n      'method': 'GET',\r\n      'type': 'application/json',\r\n      'href': `${url}?service=WFS&version=${version}&request=GetFeature`\r\n    };\r\n\r\n    // let DescribeFeatureType: IOwsOperation = null;\r\n    // let GetCapabilities: IOwsOperation = null;\r\n    // let GetPropertyValue: IOwsOperation = null;\r\n    // let GetFeatureWithLock: IOwsOperation = null;\r\n    // let LockFeature: IOwsOperation = null;\r\n    // let Transaction: IOwsOperation = null;\r\n    // let CreateStoredQuery: IOwsOperation = null;\r\n    // let DropStoredQuery: IOwsOperation = null;\r\n    // let ListStoredQueries: IOwsOperation = null;\r\n    // let DescribeStoredQueries: IOwsOperation = null;\r\n\r\n    let operations = [\r\n      GetFeature,\r\n      // GetCapabilities,\r\n      // DescribeFeatureType,\r\n      // GetPropertyValue,\r\n      // GetFeatureWithLock,\r\n      // LockFeature,\r\n      // Transaction,\r\n      // CreateStoredQuery,\r\n      // DropStoredQuery,\r\n      // ListStoredQueries,\r\n      // DescribeStoredQueries\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n\r\n  getWmsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let wmsVersion = layer.params.VERSION;\r\n    let layerName = layer.name;\r\n    let layerId = layer.id;\r\n    let format = 'image/vnd.jpeg-png';\r\n    if (layer.params && layer.params.FORMAT) format = layer.params.FORMAT;\r\n\r\n    let getMap: IOwsOperation = {\r\n      'code': 'GetMap',\r\n      'method': 'GET',\r\n      'type': format,\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetMap&TRANSPARENT=TRUE&LAYERS=${layerId}&FORMAT=${format}&TILED=true`\r\n    };\r\n\r\n    let getCapabilities: IOwsOperation = {\r\n      'code': 'GetCapabilities',\r\n      'method': 'GET',\r\n      'type': 'application/xml',\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetCapabilities`\r\n    }\r\n\r\n    let getFeatureInfo: IOwsOperation = {\r\n      'code': 'GetFeatureInfo',\r\n      'method': 'GET',\r\n      'type': 'text/html',\r\n      'href': `${url}?service=WMS&version=${wmsVersion}&request=GetFeatureInfo&TRANSPARENT=TRUE&LAYERS=${layerId}&FORMAT=${format}`\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      getMap,\r\n      getCapabilities,\r\n      getFeatureInfo\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n\r\n  getWmtsOperationsFromLayer(layer: RasterLayer): IOwsOperation[] {\r\n\r\n    let url = layer.url;\r\n    let wmtsVersion = layer.params.version;\r\n    let layerName = layer.name;\r\n    let layerId = layer.id;\r\n    let format = 'image/vnd.jpeg-png';\r\n    if (layer.params && layer.params.FORMAT) format = layer.params.FORMAT;\r\n\r\n    let getTile: IOwsOperation = {\r\n      'code': 'GetTile',\r\n      'href': `${url}?SERVICE=WMTS&REQUEST=GetTile&FORMAT=${format}&LAYER=${layerId}&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': format\r\n    };\r\n\r\n    let getCapabilities: IOwsOperation = {\r\n      'code': 'GetCapabilities',\r\n      'href': `${url}?SERVICE=WMTS&REQUEST=GetCapabilities&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': 'application/xml'\r\n    }\r\n\r\n    // Note: we deliberately use the WMS protocol here instead of WMTS.\r\n    // Reason: WMTS delivers RGB-values, wheras WMS delivers the actual value that was used to create a tile.\r\n    let getFeatureInfo: IOwsOperation = {\r\n      'code': 'GetFeatureInfo',\r\n      'href': `${url}?SERVICE=WMS&REQUEST=GetFeatureInfo&VERSION=${wmtsVersion}`,\r\n      'method': 'GET',\r\n      'type': 'text/html'\r\n    }\r\n\r\n    let operations: IOwsOperation[] = [\r\n      getTile,\r\n      getCapabilities,\r\n      getFeatureInfo\r\n    ];\r\n\r\n    return operations;\r\n  }\r\n}\r\n","import { WpsMarshaller, WpsInput, WpsOutputDescription, WpsResult, WpsCapability, WpsBboxValue, WpsData, WpsDataDescription, WpsState, WpsDataFormat } from '../wps_datatypes';\r\nimport {\r\n    WPSCapabilitiesType, IWpsExecuteProcessBody, Execute, DataInputsType,\r\n    InputType, ResponseFormType, DataType, IWpsExecuteResponse, DocumentOutputDefinitionType,\r\n    ResponseDocumentType, InputReferenceType, LiteralDataType, ExecuteResponse\r\n} from './wps_1.0.0';\r\n\r\n\r\n\r\nexport class WpsMarshaller100 implements WpsMarshaller {\r\n\r\n    constructor() { }\r\n\r\n    getCapabilitiesUrl(baseurl: string): string {\r\n        return `${baseurl}?service=WPS&request=GetCapabilities&version=1.0.0`;\r\n    }\r\n\r\n    executeUrl(baseurl: string, processId: string): string {\r\n        return `${baseurl}?service=WPS&request=Execute&version=1.0.0&identifier=${processId}`;\r\n    }\r\n\r\n    unmarshalCapabilities(capabilities: WPSCapabilitiesType): WpsCapability[] {\r\n        const out: WpsCapability[] = [];\r\n        capabilities.processOfferings.process.forEach(process => {\r\n            out.push({\r\n                id: process.identifier.value\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    unmarshalSyncExecuteResponse(responseJson: IWpsExecuteResponse, url: string, processId: string,\r\n        inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[] {\r\n\r\n        const out: WpsResult[] = [];\r\n\r\n        if (responseJson.value.status.processFailed) { // Failure?\r\n            out.push({\r\n                description: {\r\n                    id: responseJson.value.process.identifier.value,\r\n                    reference: true,\r\n                    type: 'error'\r\n                },\r\n                value: responseJson.value.statusLocation\r\n            });\r\n        } else if (responseJson.value.processOutputs) { // synchronous request?\r\n            for (const output of responseJson.value.processOutputs.output) {\r\n                const isReference = output.reference ? true : false;\r\n\r\n                let datatype: 'literal' | 'complex' | 'bbox' | 'status' | 'error';\r\n                let data;\r\n                let format: WpsDataFormat | undefined;\r\n                if (output.reference) {\r\n                    datatype = 'complex';\r\n                    data = output.reference.href || null;\r\n                    format = output.reference.mimeType as WpsDataFormat;\r\n                } else {\r\n                    if (output.data && output.data.literalData) {\r\n                        datatype = 'literal';\r\n                        format = output.data.literalData.dataType as WpsDataFormat;\r\n                    } else if (output.data && output.data.complexData) {\r\n                        datatype = 'complex';\r\n                        format = output.data.complexData.mimeType as WpsDataFormat;\r\n                    } else {\r\n                        datatype = 'bbox';\r\n                        format = undefined;\r\n                    }\r\n                    // @ts-ignore\r\n                    data = this.unmarshalOutputData(output.data);\r\n                }\r\n\r\n                out.push({\r\n                    description: {\r\n                        id: output.identifier.value,\r\n                        format: format,\r\n                        reference: isReference,\r\n                        type: datatype\r\n                    },\r\n                    value: data,\r\n                });\r\n            }\r\n        } else if (responseJson.value.statusLocation) { // asynchronous request?\r\n            out.push({\r\n                description: {\r\n                    id: responseJson.value.process.identifier.value,\r\n                    reference: true,\r\n                    type: 'status'\r\n                },\r\n                value: this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions)\r\n            });\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    protected unmarshalOutputData(data: DataType): any {\r\n        if (data.complexData) {\r\n            switch (data.complexData.mimeType) {\r\n                case 'application/vnd.geo+json':\r\n                case 'application/json':\r\n                    return data.complexData.content.map(cont => JSON.parse(cont));\r\n                case 'application/WMS':\r\n                    return data.complexData.content;\r\n                case 'text/xml':\r\n                    return new XMLSerializer().serializeToString(data.complexData.content[0]); // @TODO: better: handle actual xml-data\r\n                default:\r\n                    throw new Error(`Cannot unmarshal data of format ${data.complexData.mimeType}`);\r\n            }\r\n        } else if (data.literalData) {\r\n            switch (data.literalData.dataType) {\r\n                case 'string':\r\n                default:\r\n                    return data.literalData.value;\r\n            }\r\n        }\r\n\r\n        throw new Error(`Not yet implemented: ${data}`);\r\n    }\r\n\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        return this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions);\r\n    }\r\n\r\n    unmarshalGetStateResponse(responseJson: any, serverUrl: string, processId: string,\r\n        inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n\r\n        const response: ExecuteResponse = responseJson.value;\r\n        \r\n        const status = response.status.processSucceeded ? 'Succeeded' :\r\n        response.status.processAccepted ? 'Accepted' :\r\n        response.status.processStarted ? 'Running' :\r\n        response.status.processFailed ? 'Failed' :\r\n        'Failed';\r\n        \r\n        const state: WpsState = {\r\n            status: status,\r\n            statusLocation: response.statusLocation,\r\n        };\r\n\r\n        if (response.processOutputs && response.processOutputs.output) {\r\n            state.results = this.unmarshalSyncExecuteResponse(responseJson, serverUrl, processId, inputs, outputDescriptions);\r\n        }\r\n\r\n        return state;\r\n    }\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean): IWpsExecuteProcessBody {\r\n\r\n        const wps1Inputs = this.marshalInputs(inputs);\r\n        const wps1ResponseForm = this.marshalResponseForm(outputs, async);\r\n\r\n        const bodyValue: Execute = {\r\n            dataInputs: wps1Inputs,\r\n            identifier: processId,\r\n            responseForm: wps1ResponseForm,\r\n            service: 'WPS',\r\n            version: '1.0.0'\r\n        };\r\n\r\n        const body: IWpsExecuteProcessBody = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/1.0.0}Execute',\r\n                localPart: 'Execute',\r\n                namespaceURI: 'http://www.opengis.net/wps/1.0.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/1.0.0}wps:Execute'\r\n            },\r\n            value: bodyValue\r\n        };\r\n\r\n        return body;\r\n\r\n    }\r\n\r\n\r\n    protected marshalResponseForm(outputs: WpsOutputDescription[], async = false): ResponseFormType {\r\n\r\n        const outputDefinitions: DocumentOutputDefinitionType[] = [];\r\n        for (const output of outputs) {\r\n            let defType: DocumentOutputDefinitionType;\r\n            switch (output.type) {\r\n                case 'literal':\r\n                    defType = {\r\n                        identifier: { value: output.id },\r\n                        asReference: output.reference,\r\n                        mimeType: output.format\r\n                    };\r\n                    break;\r\n                case 'complex':\r\n                    defType = {\r\n                        identifier: { value: output.id },\r\n                        asReference: output.reference,\r\n                        mimeType: output.format\r\n                    };\r\n                    break;\r\n                default:\r\n                    throw new Error(`This Wps-outputtype has not been implemented yet! ${output} `);\r\n            }\r\n            outputDefinitions.push(defType);\r\n        }\r\n\r\n        const responseDocument: ResponseDocumentType = {\r\n            output: outputDefinitions,\r\n            status: async ? true : false,\r\n            storeExecuteResponse: async ? true : false\r\n        };\r\n\r\n        const form: ResponseFormType = {\r\n            responseDocument\r\n        };\r\n        return form;\r\n    }\r\n\r\n\r\n    protected marshalInputs(inputArr: WpsInput[]): DataInputsType {\r\n        const theInputs: InputType[] = [];\r\n        for (const inp of inputArr) {\r\n            if (inp.value === null || inp.value === undefined) {\r\n                throw new Error(`Value for input ${inp.description.id} is not set`);\r\n            }\r\n            const marshalledInput = this.marshalInput(inp);\r\n            theInputs.push(marshalledInput);\r\n        }\r\n        const inputs: DataInputsType = {\r\n            input: theInputs\r\n        };\r\n        return inputs;\r\n    }\r\n\r\n    protected marshalInput(input: WpsInput): InputType {\r\n        const id = input.description.id;\r\n        const title = input.description.id;\r\n        const abstract = '';\r\n\r\n        const inputType: InputType = {\r\n            identifier: { value: id },\r\n            title: { value: title },\r\n            _abstract: { value: abstract }\r\n        };\r\n\r\n        if (input.description.reference) {\r\n            inputType.reference = this.marshalReferenceInput(input);\r\n        } else {\r\n            inputType.data = this.marshalDataInput(input);\r\n        }\r\n\r\n        return inputType;\r\n    }\r\n\r\n    protected marshalDataInput(input: WpsInput): DataType {\r\n        let data: DataType;\r\n        switch (input.description.type) {\r\n            case 'literal':\r\n                data = {\r\n                    literalData: { value: String(input.value) }\r\n                };\r\n                break;\r\n            case 'bbox':\r\n                const values: WpsBboxValue = input.value;\r\n                data = {\r\n                    boundingBoxData: {\r\n                        lowerCorner: [values.lllat, values.lllon],\r\n                        upperCorner: [values.urlat, values.urlon]\r\n                    }\r\n                };\r\n                break;\r\n            case 'complex':\r\n                switch (input.description.format) {\r\n                    case 'text/xml':\r\n                        data = {\r\n                            complexData: {\r\n                                content: [input.value],  // @TODO: we assume here that text/xml-data is already stringified\r\n                                mimeType: input.description.format\r\n                            }\r\n                        };\r\n                        break;\r\n                    default:\r\n                        data = {\r\n                            complexData: {\r\n                                content: [JSON.stringify(input.value)],\r\n                                mimeType: input.description.format\r\n                            }\r\n                        };\r\n                }\r\n                break;\r\n            default:\r\n                throw Error(`This input is of type ${input.description.type}. We can only marshal input of type literal, bbox or complex.`);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    protected marshalReferenceInput(input: WpsInput): InputReferenceType {\r\n        const ref: InputReferenceType = {\r\n            href: input.value,\r\n            method: 'GET',\r\n            mimeType: input.description.format\r\n        };\r\n        return ref;\r\n    }\r\n\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string) {\r\n        // WPS-1.0 does not send a body with a GetStatus request.\r\n        return {};\r\n    }\r\n\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string) {\r\n        // WPS-1.0 does not send a body with a GetStatus request.\r\n        return {};\r\n    }\r\n\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string {\r\n        /** this does only work in geoserver:\r\n        return `${serverUrl}?service=WPS&version=1.0.0&request=Dismiss&executionId=${jobId}`; */\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n\r\n    marshalDismissBody(processId: string) {\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n\r\n    unmarshalDismissResponse(jsonResponse: any, serverUrl: string, processId: string): WpsState {\r\n        throw new Error('Wps 1.0 does not support Dismiss-operations.');\r\n    }\r\n}\r\n","import { StatusInfo, DataOutputType, Result } from './wps_2.0';\r\n\r\n\r\nexport const isStatusInfo = (obj: object): obj is StatusInfo => {\r\n    return obj.hasOwnProperty('jobID')\r\n       && obj.hasOwnProperty('status');\r\n};\r\n\r\nexport const isDataOutputType = (obj: object): obj is DataOutputType => {\r\n    return obj.hasOwnProperty('id') &&\r\n        (obj.hasOwnProperty('data') || obj.hasOwnProperty('reference') || obj.hasOwnProperty('output'));\r\n};\r\n\r\nexport const isResult = (obj: object): obj is Result => {\r\n    return (obj.hasOwnProperty('output') && typeof obj['output'] === 'object');\r\n};\r\n","import { WpsMarshaller, WpsInput, WpsOutputDescription, WpsResult, WpsCapability, WpsDataDescription, WpsData, WpsState } from '../wps_datatypes';\r\nimport { WPSCapabilitiesType, ExecuteRequestType, DataInputType, OutputDefinitionType, IWpsExecuteProcessBody, IWpsExecuteResponse, DataOutputType, IGetStatusRequest, Data, IGetResultRequest, IDismissRequest, IDismissResponse } from './wps_2.0';\r\nimport { isDataOutputType, isStatusInfo, isResult } from './helpers';\r\n\r\n\r\nexport class WpsMarshaller200 implements WpsMarshaller {\r\n\r\n    constructor() {}\r\n\r\n    getCapabilitiesUrl(baseurl: string): string {\r\n        return `${baseurl}?service=WPS&request=GetCapabilities&version=2.0.0`;\r\n    }\r\n\r\n    executeUrl(baseurl: string, processId: string): string {\r\n        return `${baseurl}?service=WPS&request=Execute&version=2.0.0&identifier=${processId}`;\r\n    }\r\n\r\n    unmarshalCapabilities(capabilities: WPSCapabilitiesType): WpsCapability[] {\r\n        const out: WpsCapability[] = [];\r\n        capabilities.contents.processSummary.forEach(summary => {\r\n            out.push({\r\n                id: summary.identifier.value\r\n            });\r\n        });\r\n        return out;\r\n    }\r\n\r\n    unmarshalSyncExecuteResponse(responseJson: IWpsExecuteResponse, url: string, processId: string,\r\n        inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[] {\r\n        const out: WpsResult[] = [];\r\n\r\n        if (isResult(responseJson.value)) {\r\n            for (const output of responseJson.value.output) {\r\n                const outputDescription = outputDescriptions.find(od => od.id === output.id);\r\n                if (!outputDescription) {\r\n                    throw new Error(`Could not find an output-description for the parameter ${output.id}.`);\r\n                }\r\n\r\n                const isReference = outputDescription.reference;\r\n                const datatype = outputDescription.type;\r\n                const format = outputDescription.format;\r\n                let data;\r\n                if (output.reference) {\r\n                    data = output.reference.href || null;\r\n                } else if (output.data) {\r\n                    data = this.unmarshalOutputData(output.data, outputDescription);\r\n                } else {\r\n                    throw new Error(`Output has neither reference nor data field.`);\r\n                }\r\n\r\n                out.push({\r\n                    description: {\r\n                        id: output.id,\r\n                        format: format,\r\n                        reference: isReference,\r\n                        type: datatype\r\n                    },\r\n                    value: data,\r\n                });\r\n            }\r\n        } else if (isStatusInfo(responseJson.value)) {\r\n            const state: WpsState = {\r\n                status: responseJson.value.status,\r\n                jobID: responseJson.value.jobID,\r\n                percentCompleted: responseJson.value.percentCompleted\r\n            };\r\n\r\n            out.push({\r\n                description: {\r\n                    id: processId,\r\n                    reference: true,\r\n                    type: 'status'\r\n                },\r\n                value: state\r\n            });\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    protected unmarshalOutputData(data: Data, description: WpsOutputDescription): any {\r\n        if (description.type === 'complex') {\r\n            switch (data.mimeType) {\r\n                case 'application/vnd.geo+json':\r\n                case 'application/json':\r\n                    return data.content.map((cont: any) => JSON.parse(cont));\r\n                case 'application/WMS':\r\n                    return data.content;\r\n                case 'text/xml':\r\n                    return new XMLSerializer().serializeToString(data.content[0]); // @TODO: better: handle actual xml-data\r\n                default:\r\n                    throw new Error(`Cannot unmarshal complex data of format ${data.mimeType}`);\r\n            }\r\n        } else if (description.type === 'literal') {\r\n            return data.content;\r\n        }\r\n\r\n        throw new Error(`Not yet implemented: ${data}`);\r\n    }\r\n\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        return this.unmarshalGetStateResponse(responseJson, url, processId, inputs, outputDescriptions);\r\n    }\r\n\r\n    unmarshalGetStateResponse(responseJson: any, serverUrl: string, processId: string,\r\n        inputs: WpsData[], outputDescriptions: WpsDataDescription[]): WpsState {\r\n        if (isStatusInfo(responseJson.value)) {\r\n            const state: WpsState = {\r\n                status: responseJson.value.status,\r\n                jobID: responseJson.value.jobID,\r\n                percentCompleted: responseJson.value.percentCompleted\r\n            };\r\n            return state;\r\n        } else {\r\n            throw new Error(`Not a status-info: ${responseJson}`);\r\n        }\r\n    }\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean) {\r\n        const inputsMarshalled = this.marshalInputs(inputs);\r\n        const outputsMarshalled = this.marshalOutputs(outputs);\r\n\r\n        const bodyValue: ExecuteRequestType = {\r\n            TYPE_NAME: 'WPS_2_0.ExecuteRequestType',\r\n            service: 'WPS',\r\n            version: '2.0.0',\r\n            identifier: { value: processId },\r\n            input: inputsMarshalled,\r\n            output: outputsMarshalled,\r\n            mode: async ? 'async' : 'sync',\r\n            response: 'document'\r\n        };\r\n\r\n        const body: IWpsExecuteProcessBody = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}Execute',\r\n                localPart: 'Execute',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:Execute'\r\n            },\r\n            value: bodyValue\r\n        };\r\n\r\n        return body;\r\n    }\r\n\r\n    private marshalInputs(inputs: WpsData[]): DataInputType[] {\r\n        return inputs.map(i => {\r\n            if (i.description.reference) {\r\n                return {\r\n                    id: i.description.id,\r\n                    reference: {\r\n                        href: i.value,\r\n                        mimeType: i.description.format,\r\n                    }\r\n                };\r\n            } else {\r\n                return {\r\n                    id: i.description.id,\r\n                    data: {\r\n                        content: [JSON.stringify(i.value)],\r\n                        mimeType: i.description.format\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    private marshalOutputs(outputs: WpsDataDescription[]): OutputDefinitionType[] {\r\n        return outputs.map(o => {\r\n            return {\r\n                id: o.id,\r\n                mimeType: o.format,\r\n                transmission: o.reference ? 'reference' : 'value'  // @TODO: maybe just comment out this line?\r\n            };\r\n        });\r\n    }\r\n\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string) {\r\n        const request: IGetStatusRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}GetStatus',\r\n                localPart: 'GetStatus',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:GetStatus'\r\n             },\r\n             value: {\r\n                 jobID: statusId,\r\n                 service: 'WPS',\r\n                 version: '2.0.0'\r\n             }\r\n        };\r\n        return request;\r\n    }\r\n\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string) {\r\n        const request: IGetResultRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}GetResult',\r\n                localPart: 'GetResult',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:GetResult'\r\n            },\r\n            value: {\r\n                service: 'WPS',\r\n                version: '2.0.0',\r\n                jobID: jobID\r\n            }\r\n        };\r\n        return request;\r\n    }\r\n\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string {\r\n        return serverUrl;\r\n    }\r\n\r\n    marshalDismissBody(jobId: string) {\r\n        const body: IDismissRequest = {\r\n            name: {\r\n                key: '{http://www.opengis.net/wps/2.0}Dismiss',\r\n                localPart: 'Dismiss',\r\n                namespaceURI: 'http://www.opengis.net/wps/2.0',\r\n                prefix: 'wps',\r\n                string: '{http://www.opengis.net/wps/2.0}wps:Dismiss'\r\n             },\r\n             value: {\r\n                 jobID: jobId,\r\n                 service: 'WPS',\r\n                 version: '2.0.0'\r\n             }\r\n        };\r\n        return body;\r\n    }\r\n\r\n    unmarshalDismissResponse(jsonResponse: IDismissResponse, serverUrl: string, processId: string): WpsState {\r\n        const state: WpsState = {\r\n            status: jsonResponse.value.status,\r\n            jobID: jsonResponse.value.jobID\r\n        };\r\n        return state;\r\n    }\r\n}\r\n","import { Observable, timer, of, forkJoin } from 'rxjs';\r\nimport { tap, map, mergeMap, retryWhen, delay } from 'rxjs/operators';\r\n\r\n\r\n\r\n\r\nexport function pollUntil<T>(\r\n    task$: Observable<T>, predicate: (results: any) => boolean, doWhile?: (t: T | null) => any, minWaitTime: number = 1000): Observable<T> {\r\n\r\n    if (doWhile) {\r\n        doWhile(null);\r\n    }\r\n\r\n    const tappedTask$: Observable<T> = task$.pipe(\r\n        tap((r: any) => {\r\n            if (doWhile) {\r\n                doWhile(r);\r\n            }\r\n        })\r\n    );\r\n\r\n    const requestTakesAtLeast$: Observable<T> = forkJoin(tappedTask$, timer(minWaitTime)).pipe(\r\n        map(r => r[0])\r\n    );\r\n\r\n    const polledRequest$: Observable<T> = requestTakesAtLeast$.pipe(\r\n        mergeMap((response: any) => {\r\n            if (predicate(response)) {\r\n                // console.log(`obtained correct answer ${response}`);\r\n                return of(response);\r\n            } else {\r\n                // console.log(`obtained false answer ${response}. trying again...`);\r\n                return polledRequest$;\r\n            }\r\n        })\r\n    );\r\n\r\n    return polledRequest$;\r\n}\r\n\r\n\r\nexport function delayedRetry(delayMs: number, maxRetries = 3) {\r\n    let attempts = 1;\r\n\r\n    return (src$: Observable<any>) => {\r\n        return src$.pipe(\r\n            // If an error occurs ...\r\n            retryWhen((error$: Observable<any>) => {\r\n                return error$.pipe(\r\n                    delay(delayMs), // <- in any case, first wait a little while ...\r\n                    mergeMap((error: any) => {\r\n                        if (error.status && error.status === 400) {\r\n                            // In case of a server error, repeating won't help.\r\n                            throw error;\r\n                        } else if (attempts <= maxRetries) {\r\n                            console.log('http-error. Retrying ...');\r\n                            attempts += 1;\r\n                            return of(error); // <- an observable causes request to be retried\r\n                        } else {\r\n                            console.log(`Persistent http-errors after ${attempts} attempts. Giving up.`);\r\n                            throw error; // an error causes request to be given up on.\r\n                        }\r\n                    })\r\n                );\r\n            })\r\n        );\r\n    };\r\n\r\n}\r\n","import { WpsData } from \"./wps_datatypes\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n\r\nexport interface Cache {\r\n    set(input: object, output: WpsData[]);\r\n    get(input: object): Observable<WpsData[] | null>;\r\n}\r\n\r\nexport class FakeCache implements Cache {\r\n    set(input: object, output: WpsData[]) {\r\n    }\r\n\r\n    get(input: object): Observable<WpsData[] | null> {\r\n        return of(null);\r\n    }\r\n}\r\n","import { WpsMarshaller, WpsInput, WpsVerion, WpsResult, WpsOutputDescription, WpsData, WpsState, isWpsState, WpsDataDescription } from './wps_datatypes';\r\nimport { WpsMarshaller100 } from './wps100/wps_marshaller_1.0.0';\r\nimport { WpsMarshaller200 } from './wps200/wps_marshaller_2.0.0';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, switchMap, tap, share, mergeMap } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as XLink_1_0_Factory from 'w3c-schemas/lib/XLink_1_0'; const XLink_1_0 = XLink_1_0_Factory.XLink_1_0;\r\nimport * as OWS_1_1_0_Factory from 'ogc-schemas/lib/OWS_1_1_0'; const OWS_1_1_0 = OWS_1_1_0_Factory.OWS_1_1_0;\r\nimport * as OWS_2_0_Factory from 'ogc-schemas/lib/OWS_2_0'; const OWS_2_0 = OWS_2_0_Factory.OWS_2_0;\r\nimport * as WPS_1_0_0_Factory from 'ogc-schemas/lib/WPS_1_0_0'; const WPS_1_0_0 = WPS_1_0_0_Factory.WPS_1_0_0;\r\nimport * as WPS_2_0_Factory from 'ogc-schemas/lib/WPS_2_0'; const WPS_2_0 = WPS_2_0_Factory.WPS_2_0;\r\nimport { pollUntil, delayedRetry } from './utils/polling';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { Jsonix } from '@boundlessgeo/jsonix';\r\nimport { Cache, FakeCache } from './cache';\r\n\r\n\r\n\r\n/**\r\n * The Wps-client abstracts away the differences between Wps1.0.0 and Wps2.0.0\r\n * There are two layers of marshalling:\r\n *  - the Wps-marshaller marshals user-facing data to wps-specific types\r\n *  - Jsonix marshals wps-specific data to xml.\r\n * user-facing data -> wpsmarshaller -> Wps-type-specific data -> Jsonix-marhsaller -> XML ->\r\n * -> webclient -> WPS -> XML -> Jsonix-unmarshaller -> Wps-type-specific data -> wpsmarshaller -> user-facing data\r\n */\r\n@Injectable()\r\nexport class WpsClient {\r\n\r\n    private version: WpsVerion;\r\n    private xmlmarshaller: any;\r\n    private xmlunmarshaller: any;\r\n    private wpsmarshaller: WpsMarshaller;\r\n    private cache: Cache = new FakeCache();\r\n\r\n    constructor(\r\n        @Inject('WpsVersion') version: WpsVerion = '1.0.0',\r\n        private webclient: HttpClient,\r\n        @Inject('WpsCache') cache?: Cache\r\n    ) {\r\n        this.version = version;\r\n        if (cache) this.cache = cache;\r\n        let context;\r\n        if (this.version === '1.0.0') {\r\n            this.wpsmarshaller = new WpsMarshaller100();\r\n            context = new Jsonix.Context([XLink_1_0, OWS_1_1_0, WPS_1_0_0]);\r\n        } else if (this.version === '2.0.0') {\r\n            this.wpsmarshaller = new WpsMarshaller200();\r\n            context = new Jsonix.Context([XLink_1_0, OWS_2_0, WPS_2_0]);\r\n        } else {\r\n            throw new Error('You entered a WPS version other than 1.0.0 or 2.0.0.');\r\n        }\r\n        this.xmlunmarshaller = context.createUnmarshaller();\r\n        this.xmlmarshaller = context.createMarshaller();\r\n    }\r\n\r\n\r\n    getCapabilities(url: string): Observable<any> {\r\n        const getCapabilitiesUrl = this.wpsmarshaller.getCapabilitiesUrl(url);\r\n        return this.getRaw(getCapabilitiesUrl).pipe(\r\n            map((response: any) => {\r\n                const responseJson = this.xmlunmarshaller.unmarshalString(response);\r\n                return this.wpsmarshaller.unmarshalCapabilities(responseJson.value);\r\n            }) // @TODO: handle case when instead of WpsCapabilites an ExceptionReport is returned\r\n        );\r\n    }\r\n\r\n\r\n    describeProcess(processId: string): Observable<any> {\r\n        throw new Error('Not implemented yet');\r\n    }\r\n\r\n\r\n    executeAsync(url: string, processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[],\r\n        pollingRate: number = 1000, tapFunction?: (response: WpsState | null) => any): Observable<WpsResult[]> {\r\n\r\n        const executeRequest$: Observable<WpsState> = this.executeAsyncS(url, processId, inputs, outputs);\r\n\r\n        const query$ = executeRequest$.pipe(\r\n\r\n            // poll until suceeded\r\n            mergeMap((currentState: WpsState) => {\r\n                const nextState$: Observable<WpsState> = this.getNextState(currentState, url, processId, inputs, outputs);\r\n\r\n                const poll$: Observable<WpsState> = pollUntil<WpsState>(\r\n                    nextState$,\r\n                    (response: WpsState) => {\r\n                        return response.status === 'Succeeded';\r\n                    },\r\n                    tapFunction,\r\n                    pollingRate\r\n                );\r\n\r\n                return poll$;\r\n            }),\r\n\r\n            // fetch results\r\n            mergeMap((lastState: WpsState) => {\r\n                return this.fetchResults(lastState, url, processId, inputs, outputs);\r\n            }),\r\n\r\n            // In case of errors:\r\n            tap((response: WpsData[]) => {\r\n                for (const result of response) {\r\n                    if (result.description.type === 'error') {\r\n                        console.log('server responded with 200, but body contained an error-result: ', result);\r\n                        throw new Error(result.value);\r\n                    }\r\n                }\r\n            })\r\n        );\r\n\r\n        return this.cachedQuery(url, processId, inputs, outputs, query$);\r\n    }\r\n\r\n    private cachedQuery(url: string, processId: string, inputs: WpsInput[],\r\n        outputs: WpsOutputDescription[], query$: Observable<WpsData[]>): Observable<WpsData[]> {\r\n\r\n        const cachedResponse$: Observable<WpsResult[] | null> = this.cache.get({url, processId, inputs, outputs});\r\n        return cachedResponse$.pipe(\r\n            switchMap((results) => {\r\n                if (results) {\r\n                    return of(results);\r\n                } else {\r\n                    return query$.pipe(\r\n                        tap((response: WpsData[]) => {\r\n                            this.cache.set({url, processId, inputs, outputs}, response);\r\n                        })\r\n                    );\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private getNextState(currentState: WpsState, serverUrl: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsState> {\r\n\r\n        let request$: Observable<string>;\r\n        if (this.version === '1.0.0') {\r\n\r\n            if (!currentState.statusLocation) {\r\n                throw Error('No status location');\r\n            }\r\n            request$ = this.getRaw(currentState.statusLocation);\r\n\r\n        } else if (this.version === '2.0.0') {\r\n\r\n            if (!currentState.jobID) {\r\n                throw Error('No job-Id');\r\n            }\r\n            const execbody = this.wpsmarshaller.marshallGetStatusBody(serverUrl, processId, currentState.jobID);\r\n            const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n            request$ = this.postRaw(serverUrl, xmlExecbody);\r\n\r\n        } else {\r\n            throw new Error(`'GetStatus' has not yet been implemented for this WPS-Version (${this.version}).`);\r\n        }\r\n\r\n        const request1$: Observable<WpsState> = request$.pipe(\r\n            delayedRetry(2000, 2),\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsData[] | WpsState =\r\n                    this.wpsmarshaller.unmarshalGetStateResponse(jsonResponse, serverUrl, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n\r\n        return request1$;\r\n    }\r\n\r\n    private fetchResults(lastState: WpsState, serverUrl: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsData[]> {\r\n\r\n        if (lastState.results) { // WPS 1.0: results should already be in last state\r\n            return of(lastState.results);\r\n        } else { // WPS 2.0: get results with post request\r\n\r\n            if (!lastState.jobID) {\r\n                throw new Error(`You want me to get a result, but I can't find a jobId. I don't know what to do now!`);\r\n            }\r\n\r\n            const execBody = this.wpsmarshaller.marshallGetResultBody(serverUrl, processId, lastState.jobID);\r\n            const xmlExecBody = this.xmlmarshaller.marshalString(execBody);\r\n\r\n            return this.postRaw(serverUrl, xmlExecBody).pipe(\r\n                map((xmlResponse: string) => {\r\n                    const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                    const output = this.wpsmarshaller.unmarshalSyncExecuteResponse(jsonResponse, serverUrl, processId, inputs, outputDescriptions);\r\n                    return output;\r\n                }),\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    private executeAsyncS(url: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsState> {\r\n\r\n        const executeUrl = this.wpsmarshaller.executeUrl(url, processId);\r\n        const execbody = this.wpsmarshaller.marshalExecBody(processId, inputs, outputDescriptions, true);\r\n        const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n        return this.postRaw(executeUrl, xmlExecbody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsState =\r\n                    this.wpsmarshaller.unmarshalAsyncExecuteResponse(jsonResponse, url, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    execute(url: string, processId: string, inputs: WpsInput[],\r\n        outputDescriptions: WpsOutputDescription[]): Observable<WpsResult[]> {\r\n\r\n        const executeUrl = this.wpsmarshaller.executeUrl(url, processId);\r\n        const execbody = this.wpsmarshaller.marshalExecBody(processId, inputs, outputDescriptions, false);\r\n        const xmlExecbody = this.xmlmarshaller.marshalString(execbody);\r\n\r\n        return this.postRaw(executeUrl, xmlExecbody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output: WpsData[] =\r\n                    this.wpsmarshaller.unmarshalSyncExecuteResponse(jsonResponse, url, processId, inputs, outputDescriptions);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    dismiss(serverUrl: string, processId: string, jobId: string): Observable<any> {\r\n\r\n        const dismissUrl = this.wpsmarshaller.dismissUrl(serverUrl, processId, jobId);\r\n        const dismissBody = this.wpsmarshaller.marshalDismissBody(jobId);\r\n        const xmlDismissBody = this.xmlmarshaller.marshalString(dismissBody);\r\n\r\n        return this.postRaw(dismissUrl, xmlDismissBody).pipe(\r\n            map((xmlResponse: string) => {\r\n                const jsonResponse = this.xmlunmarshaller.unmarshalString(xmlResponse);\r\n                const output = this.wpsmarshaller.unmarshalDismissResponse(jsonResponse, serverUrl, processId);\r\n                return output;\r\n            })\r\n        );\r\n    }\r\n\r\n    postRaw(url: string, xmlBody: string): Observable<string> {\r\n        const headers = {\r\n            'Content-Type': 'text/xml',\r\n            'Accept': 'text/xml, application/xml'\r\n        };\r\n        return this.webclient.post(url, xmlBody, { headers, responseType: 'text' }).pipe(\r\n            delayedRetry(2000, 2),\r\n            share()  // turning hot: to make sure that multiple subscribers dont cause multiple requests\r\n        );\r\n    }\r\n\r\n    getRaw(url: string): Observable<string> {\r\n        const headers = {\r\n            'Accept': 'text/xml, application/xml'\r\n        };\r\n        return this.webclient.get(url, { headers, responseType: 'text' }).pipe(\r\n            delayedRetry(2000, 2)\r\n        );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OwcJsonService } from './owc/owc-json.service';\r\nimport { WmtsClientService } from './wmts/wmtsclient.service';\r\nimport { WpsClient } from './wps/wpsclient';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  exports: [],\r\n  providers: [OwcJsonService, WmtsClientService, WpsClient]\r\n})\r\nexport class ServicesOgcModule { }\r\n","/**\r\n * Type definitions for OGC OWS Context Geo Encoding Standard Version: 1.0\r\n * http://docs.opengeospatial.org/is/14-055r2/14-055r2.html\r\n * Definitions by: Mathias Boeck\r\n * TypeScript Version: 2.5.3\r\n *\r\n * depends on @types/geojson@^7946.0.2\r\n */\r\nimport * as GeoJSON from 'geojson';\r\n\r\n\r\n/**\r\n * The OWS Context describes Metadata, API, Time Range\r\n * http://www.owscontext.org/owc_user_guide/C0_userGuide.html#truethe-ows-context-document-structure\r\n * If no bounding box is specified, do not change the current view when the context document is loaded.\r\n */\r\nexport interface IOwsContext extends GeoJSON.FeatureCollection<GeoJSON.GeometryObject | null, GeoJSON.GeoJsonProperties> {\r\n  /**\r\n   * The id element defines a mandatory reference to the identification of the Context document.\r\n   * The content for the id element SHALL be an IRI, as defined by IETF [RFC3987]\r\n   */\r\n  id: string | number;\r\n  properties: {\r\n    links: { profiles: string[] } | IOwsLinks[];\r\n    /** Language of Context document content */\r\n    lang: LangString;\r\n    /** Title for the Context document */\r\n    title: string;\r\n    /** Date of a creation or update of the Context document */\r\n    updated: DateString;\r\n    /** Description of the Context document purpose or content */\r\n    subtitle?: string;\r\n    /** This element is optional and indicates the authors array of the Context document */\r\n    authors?: IOwsAuthor[];\r\n    /** Identifier for the publisher of the Context document */\r\n    publisher?: string;\r\n    /** Tool/application used to create the Context document and its properties */\r\n    creator?: IOwsCreator;\r\n    /**\r\n     * Properties of the display in use when the context document was created (for display based applications only).\r\n     * This class is optional and intended for creator applications that use a graphical user interface with a geographical display within a fixed pixel size and not scalable to different computational devices \r\n     */\r\n    display?: IOwsCreatorDisplay[];\r\n    /** Information about rights held in and over the Context document */\r\n    rights?: string;\r\n    /**\r\n    * Date or range of dates relevant to the resource \r\n    * time range which is expected to be of interest to the user.\r\n    */\r\n    date?: DateString;\r\n    /** This array is an optional and expresses categories related to this Context document */\r\n    categories?: IOwsCategorie[];\r\n    /** Extension Any other element */\r\n    [k: string]: any;\r\n  };\r\n  /** Ordered List of Resources available on the Context document */\r\n  features: IOwsResource[];\r\n  /** Extension Any other element */\r\n  [k: string]: any;\r\n}\r\n\r\n/**\r\n * Each layer (a.k.a. feature) in a context document is known as a ‘Resource’\r\n * A Resource reference a set of geospatial information to be treated as a logical element.\r\n * The resources are ordered such that the first item in the document is to be displayed at the front.\r\n * This defines the order in which layers are drawn.\r\n * A resource (which in GIS terms is a layer) can have a number of offerings, and each offering\r\n * is focussed on a particular representation of information.\r\n * These can be one of a number of OGC Web Services, specifically WMS, WMTS, WFS, WCS, WPS and CSW,\r\n * or one of a number of inline or referenced formats, specifically GML, KML, GeoTIFF, GMLJP2, GMLCOV,\r\n * or a custom offering type defined in a profile or by an organisation.\r\n * http://www.owscontext.org/owc_user_guide/C0_userGuide.html#truethe-ows-context-document-structure\r\n */\r\nexport interface IOwsResource extends GeoJSON.Feature {\r\n  /**\r\n   * Unambiguous reference to the identification of the Context resource (IRI)\r\n   * String type that SHALL contain a URI value\r\n   */\r\n  id: string | number;\r\n  properties: IOwsResourceProperties;\r\n  [k: string]: any;\r\n}\r\n\r\nexport interface IOwsResourceProperties {\r\n  /** Title given to the Context resource */\r\n  title: string;\r\n  /** Date of the last update of the Context resource */\r\n  updated: DateString;\r\n  /** The purpose is to provide a generic description of the content in a format understandable by generic readers */\r\n  abstract?: string;\r\n  /** This element is optional and indicates the authors array of the Context resource */\r\n  authors?: IOwsAuthor[];\r\n  /** Entity responsible for making the Context resource available */\r\n  publisher?: string;\r\n  /** Information about rights held in and over the Context resource */\r\n  rights?: string;\r\n  /** Date or range of dates relevant to the Context resource */\r\n  date?: DateString;\r\n  /** This element is optional and can contain a number of offerings defined by the class OWC:Offering */\r\n  offerings?: IOwsOffering[];\r\n  /** Flag value indicating to the client if the Context resource should be displayed by default */\r\n  active?: boolean;\r\n  /** This array is optional and expresses a category related to the Context resource */\r\n  categories?: IOwsCategorie[];\r\n  /** Minimum scale for the display of the Context resource Double */\r\n  minscaledenominator?: number;\r\n  /** Maximum scale for the display of the Context resource Double */\r\n  maxscaledenominator?: number;\r\n  /** Definition of the folder in which the resource is placed \r\n  * The folder attribute is intended to support the concept present in many clients or organising layers into folders.\r\n  */\r\n  folder?: string;\r\n  /** TODO!!! links is defined as Object but in the examples as Array  */\r\n  links?: IOwsLinks[];\r\n  [k: string]: any;\r\n}\r\n\r\n\r\n/**\r\n * In reality a resource can be realised in a number of different ways, and so an OWC document allows various options to be specified.\r\n * These are known as offerings.\r\n * The intention is that these are, as far as is possible by the format used,\r\n * equivalent and no priority is assigned to their order in the standard.\r\n * They are intended to be alternatives that the client can use to allow it to visualise or use the resource.\r\n *\r\n * So for example four offerings, a WMS, a WFS with portrayal as SLD, and an inline GML Offering again with portrayal as SLD.\r\n * Different clients could use these offerings as appropriate:\r\n * - a simple browser based client could use the WMS offering provided, using the standard portrayal\r\n * - a more sophisticated client, could use the WFS offering and the associated SLD Document.\r\n *\r\n * There are two types of offering, service offerings and data offerings.\r\n * A service offering has a service request (in the form of a capabilities request and a data request)\r\n * and optional content and styling elements.\r\n * A data offering has a content element and optional styling elements.\r\n *\r\n *\r\n * http://www.owscontext.org/owc_user_guide/C0_userGuide.html#truemultiple-offerings-and-priority\r\n */\r\nexport interface IOwsOffering {\r\n  /** Extension Offerings with type - string */\r\n  code: WMS_Offering | WFS_Offering | WCS_Offering | WPS_Offering | CSW_Offering | WMTS_Offering |\r\n  GML_Offering | KML_Offering | GeoTIFF_Offering | GMLJP2_Offering | GMLCOV_Offering | string;\r\n  /** Web Service Offerings provide their operations */\r\n  operations?: IOwsOperation[];\r\n  /** Content Offerings allow content to be embedded in an OWS Context document. */\r\n  contents?: IOwsContent[];\r\n  styles?: IOwsStyleSet[];\r\n  [k: string]: any;\r\n}\r\n\r\n\r\nexport interface IOwsCreator {\r\n  title?: string;\r\n  uri?: string;\r\n  version?: string;\r\n}\r\n\r\nexport interface IOwsAuthor {\r\n  /** Entity primarily responsible for making the Context document */\r\n  name?: string;\r\n  email?: string;\r\n  uri?: string;\r\n  [k: string]: any;\r\n}\r\n\r\nexport interface IOwsCategorie {\r\n  scheme?: string;\r\n  /** Category related to this context document. It MAY have a related code-list that is identified by the scheme attribute */\r\n  term?: string;\r\n  label?: string;\r\n}\r\n\r\nexport interface IOwsLinks {\r\n  rel: string;\r\n  href?: string;\r\n  type?: string;\r\n  title?: string;\r\n  /** Reference to a description of the Context resource in alternative format */\r\n  alternates?: string;\r\n  lang?: LangString;\r\n  [k: string]: any;\r\n}\r\n\r\nexport interface IOwsCreatorApplication {\r\n  title?: string;\r\n  uri?: string;\r\n  version?: string;\r\n}\r\n\r\nexport interface IOwsCreatorDisplay {\r\n  /** Width measured in pixels of the display showing the Area of Interest */\r\n  pixelWidth?: number;\r\n  /** Width measured in pixels of the display showing by the Area of Interest */\r\n  pixelHeight?: number;\r\n  /** The size of a pixel of the display in milimeters \r\n   * (combined with the previous ones allows for the real display size to be calculated) */\r\n  mmPerPixel?: number;\r\n  [k: string]: any;\r\n}\r\n\r\n/**\r\n * Most service offerings have two operations, a ‘GetCapabilities’ operation and a data operation such as ‘GetMap’ for WMS \r\n */\r\nexport interface IOwsOperation {\r\n  /**\r\n   * The code identifies the type of operation.\r\n   * Valid types are defined within each specific extension within the OWS Context conceptual model [OGC 12-080].\r\n   */\r\n  code: string;\r\n  /** method defines the access method, for example GET or POST. */\r\n  method: string;\r\n  type?: string;\r\n  /** href is the URI containing the definition of the request */\r\n  href?: string;\r\n  request?: IOwsContent;\r\n  result?: IOwsContent;\r\n  /** Extension of Operation */\r\n  [k: string]: any;\r\n}\r\n\r\n\r\nexport interface IOwsContent {\r\n  /** MIME type of the Content */\r\n  type: string;\r\n  href?: string;\r\n  title?: string;\r\n  /** String type, not empty that can contain any text encoded media type */\r\n  content?: string;\r\n  [k: string]: any;\r\n}\r\n\r\nexport interface IOwsStyleSet {\r\n  name: string;\r\n  title: string;\r\n  abstract?: string;\r\n  default?: boolean;\r\n  legendURL?: string;\r\n  content?: IOwsContent;\r\n  [k: string]: any;\r\n}\r\n\r\n\r\n\r\n/** ISO-8601 format e.g. YYYY-MM-DDThh:mm:ssZ or YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ */\r\nexport type DateString = string;\r\n\r\n\r\n/** RFC-3066 code e.g. en,de */\r\nexport type LangString = string;\r\n\r\n\r\nexport type WMS_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/wms' |\r\n    'http://schemas.opengis.net/wms/1.1.1' | 'http://schemas.opengis.net/wms/1.1.0';\r\nexport type WFS_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/wfs';\r\nexport type WCS_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/wcs';\r\nexport type WPS_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/wps';\r\nexport type CSW_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/csw';\r\nexport type WMTS_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/wmts';\r\nexport type GML_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/gml';\r\nexport type KML_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/kml';\r\nexport type GeoTIFF_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/geotiff';\r\nexport type GMLJP2_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmljp2';\r\nexport type GMLCOV_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/gmlcov';\r\n","import { IOwsContext, IOwsResource, IOwsOffering, WMS_Offering, WFS_Offering, WCS_Offering, WPS_Offering,\r\n    CSW_Offering, WMTS_Offering, GML_Offering, KML_Offering, GeoTIFF_Offering, GMLJP2_Offering,\r\n    GMLCOV_Offering, IOwsResourceProperties } from './owc-json';\r\n\r\n\r\n\r\nimport * as GeoJSON from 'geojson';\r\nexport interface IEocOwsContext extends IOwsContext {\r\n    features: IEocOwsResource[];\r\n    projections?: IEocOwsProjection[];\r\n}\r\n\r\nexport interface IEocOwsResource extends IOwsResource {\r\n    properties: IEocOwsResourceProperties;\r\n}\r\n\r\nexport interface IEocOwsResourceProperties extends IOwsResourceProperties {\r\n    opacity?: number;\r\n    attribution?: string;\r\n    shards?: string;\r\n    dimensions?: IEocOwsResourceDimensions;\r\n}\r\n\r\nexport interface IEocOwsResourceDimensions {\r\n  time?: IEocOwsResourceDimension;\r\n  elevation?: IEocOwsResourceDimension;\r\n  [k: string]: any;\r\n}\r\n\r\nexport interface IEocOwsResourceDimension {\r\n  /** Default step display of time slider */\r\n  display?: string;\r\n  units: string;\r\n  value?: string;\r\n}\r\n\r\nexport interface IEocOwsOffering extends IOwsOffering {\r\n    code: WMS_Offering | WFS_Offering | WCS_Offering | WPS_Offering | CSW_Offering |\r\n        WMTS_Offering | GML_Offering | KML_Offering | GeoTIFF_Offering | GMLJP2_Offering |\r\n        GMLCOV_Offering | GeoJson_Offering | string;\r\n    legendUrl?: string;\r\n    iconUrl?: string;\r\n    title?: string;\r\n}\r\n\r\nexport interface IEocWmsOffering extends IEocOwsOffering {\r\n    code: WMS_Offering;\r\n}\r\n\r\nexport interface IEocOwsWmtsOffering extends IEocOwsOffering {\r\n    code: WMTS_Offering;\r\n    matrixSets?: IEocOwsWmtsMatrixSet[];\r\n}\r\n\r\nexport interface IEocOwsWmtsMatrixSet {\r\n    /** EPSG-Code */\r\n    srs: string;\r\n    matrixSet: string;\r\n    matrixIds: string[];\r\n    origin: {\r\n        x: number,\r\n        y: number\r\n    };\r\n    resolutions: number[];\r\n    tilesize: {\r\n        height: number,\r\n        width: number\r\n    };\r\n}\r\n\r\nexport interface IEocOwsProjection {\r\n    bbox: GeoJSON.BBox;\r\n    code: string;\r\n    default?: boolean;\r\n    unit?: string | number;\r\n}\r\n/**\r\n* http://www.owscontext.org/owc_user_guide/C0_userGuide.html#trueextension-offerings\r\n*/\r\nexport type GeoJson_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/geojson';\r\nexport type Xyz_Offering = 'http://www.opengis.net/spec/owc-geojson/1.0/req/xyz';\r\n","export type WpsVerion = '1.0.0' | '2.0.0';\r\nexport type WpsDataFormat = 'application/vnd.geo+json' | 'application/json' | 'application/WMS' |\r\n                            'application/xml' | 'text/xml' | 'application/text' | 'image/geotiff' |\r\n                            'text/plain';\r\n\r\n\r\nexport type ProcessId = string;\r\nexport type ProductId = string;\r\n\r\nexport interface WpsDataDescription {\r\n    id: ProductId;\r\n    type: 'literal' | 'complex' | 'bbox' | 'status' | 'error';\r\n    reference: boolean;\r\n    format?: WpsDataFormat;\r\n    description?: string;\r\n    defaultValue?: any;\r\n}\r\nexport type WpsInputDescription = WpsDataDescription;\r\nexport type WpsOutputDescription = WpsDataDescription;\r\n\r\n\r\nexport interface WpsData {\r\n    description: WpsDataDescription;\r\n    value: any;\r\n}\r\nexport type WpsInput = WpsData;\r\nexport type WpsResult = WpsData;\r\n\r\nexport interface WpsBboxDescription {\r\n    id: ProductId;\r\n    type: 'bbox';\r\n    reference: boolean;\r\n    format?: WpsDataFormat;\r\n    description?: string;\r\n    defaultValue?: any;\r\n}\r\n\r\nexport interface WpsBboxValue {\r\n    crs: string;\r\n    lllon: number;\r\n    lllat: number;\r\n    urlon: number;\r\n    urlat: number;\r\n}\r\n\r\nexport const isBbox = (obj: object): obj is WpsBboxValue => {\r\n    return (\r\n        obj.hasOwnProperty('crs') &&\r\n        obj.hasOwnProperty('lllon') &&\r\n        obj.hasOwnProperty('lllat') &&\r\n        obj.hasOwnProperty('urlon') &&\r\n        obj.hasOwnProperty('urlat')\r\n    );\r\n};\r\n\r\n\r\nexport interface WpsState {\r\n    status: 'Succeeded' | 'Failed' | 'Accepted' | 'Running' | 'Dismissed';\r\n    percentCompleted?: number;\r\n    /** WPS 2.0 only */\r\n    jobID?: string;\r\n    /** WPS 1.0 only */\r\n    statusLocation?: string;\r\n    /** WPS 1.0 only: a success-state already contains the results */\r\n    results?: WpsData[];\r\n}\r\n\r\nexport function isWpsState(obj: object): obj is WpsState {\r\n    return obj && obj.hasOwnProperty('status') && (obj.hasOwnProperty('jobID') || obj.hasOwnProperty('statusLocation'));\r\n}\r\n\r\n\r\nexport interface WpsBboxData {\r\n    description: WpsBboxDescription;\r\n    value: WpsBboxValue;\r\n}\r\n\r\nexport interface WpsCapability {\r\n    id: string;\r\n}\r\n\r\n\r\nexport interface WpsMarshaller {\r\n\r\n    executeUrl(url: string, processId: string): string;\r\n    dismissUrl(serverUrl: string, processId: string, jobId: string): string;\r\n    getCapabilitiesUrl(baseurl: string): string;\r\n\r\n    marshalExecBody(processId: string, inputs: WpsInput[], outputs: WpsOutputDescription[], async: boolean): any;\r\n    marshallGetStatusBody(serverUrl: string, processId: string, statusId: string): any;\r\n    marshallGetResultBody(serverUrl: string, processId: string, jobID: string): any;\r\n    marshalDismissBody(jobId: string): any;\r\n\r\n    unmarshalCapabilities(capabilitiesJson: any): WpsCapability[];\r\n    unmarshalSyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsResult[];\r\n    unmarshalAsyncExecuteResponse(responseJson: any, url: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsState;\r\n    unmarshalGetStateResponse(jsonResponse: any, serverUrl: string, processId: string, inputs: WpsInput[], outputDescriptions: WpsOutputDescription[]): WpsState;\r\n    unmarshalDismissResponse(jsonResponse: any, serverUrl: string, processId: string): WpsState;\r\n}\r\n"],"names":["XLink_1_0_Factory.XLink_1_0","OWS_1_1_0_Factory.OWS_1_1_0","SMIL_2_0_Factory.SMIL_2_0","SMIL_2_0_Language_Factory.SMIL_2_0_Language","GML_3_1_1_Factory.GML_3_1_1","WMTS_1_0_Factory.WMTS_1_0","tslib_1.__values","XLink_1_0","OWS_1_1_0","OWS_2_0_Factory.OWS_2_0","WPS_1_0_0_Factory.WPS_1_0_0","WPS_2_0_Factory.WPS_2_0"],"mappings":"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"}